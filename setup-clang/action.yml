name: "Setup Clang"
description: |
  Set up a specific version of a Clang compiler and add it to the PATH.
  In most workflows, this is used as an auxiliary action for the setup-cpp action.
  
  This allows us to test a C++ library with any Clang version, and not only the versions 
  circumstantially provided by apt-get.
  
  This action uses a number of alternatives to find or install Clang:
  
  - The Clang path provided to 'path'
  - Any other version of Clang it can find in the system
  - Any other version of Clang available from APT
  - A version of Clang from our own binary releases

inputs:
  version:
    description: |
      Version range or exact version of Clang to use, using SemVer's version range syntax. 
      
      By default, it uses any version available in the environment.

    required: false
    default: '*'

  path:
    description: 'The clang or clang++ executable. We attempt to find Clang at this path first.'
    required: false
    default: 'clang++'

  cache:
    description: |
      Used to specify whether the Clang installation should be cached in the case Clang needs to be downloaded."
    required: false
    default: 'false'

  architecture:
    description: |
      The target architecture (x86, x64). By default, this value is inferred.
    required: false
    default: ''

  check-latest:
    description: |
      By default, when Clang is not available, this action will install the minimum version in the version spec.
      This ensures the code respects its contract in terms of what minimum Clang version is supported.
      
      Set this option if you want the action to check for the latest available version that satisfies the version spec
      instead.
    required: false
    default: 'false'

  update-environment:
    description: "Set this option if you want the action to update environment variables."
    required: false
    default: 'true'

  trace-commands:
    description: 'Trace commands executed by the workflow.'
    required: false
    default: 'false'

outputs:
  cc:
    description: "The absolute path to the clang executable."
    value: ${{ steps.features.outputs.cc }}

  cxx:
    description: "The absolute path to the clang++ executable."
    value: ${{ steps.features.outputs.cxx }}

  dir:
    description: "The absolute path to the Clang directory containing the executable."
    value: ${{ steps.features.outputs.dir }}

  version:
    description: "The installed Clang version. Useful when given a version range as input."
    value: ${{ steps.version.outputs.release }}

  version-major:
    description: "The installed Clang version major. Useful when given a version range as input."
    value: ${{ steps.version.outputs.major }}

  version-minor:
    description: "The installed Clang version minor. Useful when given a version range as input."
    value: ${{ steps.version.outputs.minor }}

  version-patch:
    description: "The installed Clang version patch. Useful when given a version range as input."
    value: ${{ steps.version.outputs.patch }}

  cache-hit:
    description: "A boolean value to indicate a cache entry was found"
    value: ${{ steps.cache-clang.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Extract version from compiler prefixed string
      id: strip-version
      shell: bash
      run: |
        # Strip version from input prefixed string
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        version="${{ inputs.version }}"
        
        # Remove "clang-" or "clang++-" prefix
        if [[ "$version" == clang-* ]] || [[ "$version" == clang++-* ]]; then
        version="${version#clang-}"
        version="${version#clang++-}"
        fi
        
        # Remove "clang " or "clang++ " prefix
        if [[ "$version" == clang\ * ]] || [[ "$version" == clang++\ * ]]; then
        version="${version#clang }"
        version="${version#clang++ }"
        fi
        
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Ensure git is available
      uses: alandefreitas/cpp-actions/package-install@v1.0.0
      with:
        apt-get: git

    - name: Find all Clang Release Versions
      id: release-versions
      shell: bash
      run: |
        # Find all Clang Release Versions
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}

        if [ "${{ runner.os }}" != "Linux" ]; then
            echo "::error title:Setup Clang::Setup Clang: This action is only supported on Linux"
            false
        fi
        
        # Download the Git tags from the Clang repository
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        git_tags=$(git ls-remote --tags https://github.com/llvm/llvm-project | awk '{print $2}' | cut -d '/' -f 3)
        ${{ (inputs.trace-commands == 'true' && 'echo "git_tags=$git_tags"  | tr "\n" " "') || '' }}
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        # Extract the version numbers from the Git tags using a regular expression
        regex='^llvmorg-([0-9]+\.[0-9]+\.[0-9]+)$'
        versions=()
        all_versions=""
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        for tag in $git_tags
        do
          if [[ $tag =~ $regex ]]; then
            version=${BASH_REMATCH[1]}
            versions+=("$version")
            all_versions+="$version "
          fi
        done

        sort_arg="${{ (inputs.check-latest == 'true' && '-rV') || '-V' }}"
        all_versions=$(echo "$all_versions" | tr ' ' '\n' | sort "$sort_arg" | paste -s -d ' ')
        echo "Clang versions: $all_versions"
        echo "all-versions=$all_versions" >> $GITHUB_OUTPUT
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        # Sort the version numbers using the "sort -V" command and pick the latest one
        if [ ${#versions[@]} -gt 0 ]; then
          latest_version=$(printf "%s\n" "${versions[@]}" | sort -V | tail -n1)
        else
          latest_version="16.0.3" # placeholder when the tags fail. Should not happen.
        fi
        echo "latest=$latest_version" >> $GITHUB_OUTPUT

    - name: System Path Clang Version
      id: find-path-version
      if: ${{ inputs.path }}
      shell: bash
      run: |
        # Find Clang Path Versions
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}

        # Look for system Clang executables
        CLANG_EXECUTABLE="${{ inputs.path }}"
        if command -v "$CLANG_EXECUTABLE" &> /dev/null; then
          VERSION_OUTPUT=$("$CLANG_EXECUTABLE" --version)
          regex='[0-9]+\.[0-9]+\.[0-9]+'
          [[ $VERSION_OUTPUT =~ $regex ]]
          CLANG_VERSION="${BASH_REMATCH[0]}"
        
          if [ "$CLANG_VERSION" != "" ]; then
            echo -E "executable=$(which $CLANG_EXECUTABLE)" >> $GITHUB_OUTPUT
            echo "version=$CLANG_VERSION" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Check if path Clang version satisfies the requirements
      uses: alandefreitas/cpp-actions/semver-utils@v1.3.0
      if: ${{ steps.find-path-version.outputs.version != '' }}
      id: path-version
      with:
        version: ${{ steps.find-path-version.outputs.version }}
        satisfies: ${{ steps.strip-version.outputs.version || steps.release-versions.outputs.latest }}
        lenient: true
        trace-commands: ${{ inputs.trace-commands }}

    - name: Setup System Clang
      if: ${{ steps.path-version.outputs.satisfies == 'true' }}
      shell: bash
      id: setup-path-clang
      run: |
        # Setup compatible Clang version from the path input variable
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        executable="${{ steps.find-path-version.outputs.executable }}"
        version="${{ steps.path-version.outputs.release }}"
        
        # Find corresponding clang++ / clang pair
        filename=$(basename "$executable")
        dirname=$(dirname "$executable")
        if [[ "$filename" == clang++* ]]; then
          cc_filename="clang${filename#clang++}"  # Replace clang++ with clang
          cxx_filename="$filename"
        elif [[ "$filename" == clang* ]]; then
          cc_filename="$filename"
          cxx_filename="clang++${filename#clang}"  # Replace clang with clang++
        fi
        cc="$dirname/$cc_filename"
        cxx="$dirname/$cxx_filename"
        
        # Make sure the versions match
        cc_version=$("$cc" --version)
        regex='[0-9]+\.[0-9]+\.[0-9]+'
        [[ $cc_version =~ $regex ]]
        cc_version="${BASH_REMATCH[0]}"
        
        cxx_version=$("$cxx" --version)
        regex='[0-9]+\.[0-9]+\.[0-9]+'
        [[ $cxx_version =~ $regex ]]
        cxx_version="${BASH_REMATCH[0]}"
        
        if [ "$cc_version" == "$cxx_version" ]; then
          echo -E "bin=$dirname" >> $GITHUB_OUTPUT
          clang_dest="$(dirname "$dirname")"
          echo -E "clang_dest=$clang_dest" >> $GITHUB_OUTPUT
          echo -E "cc=$cc" >> $GITHUB_OUTPUT
          echo -E "cxx=$cxx" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
        fi

    - name: Find all Clang System Versions
      id: system-versions
      if: ${{ steps.setup-path-clang.outputs.cxx == '' }}
      shell: bash
      run: |
        # Find all Clang System Versions
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}

        # Look for system Clang executables
        CLANG_EXECUTABLES=""
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        DPKG_OUTPUT=$(dpkg --list)
        set +e
        DPKG_CLANGS_OUTPUT=$(echo "$DPKG_OUTPUT" | grep -E ' clang(-[0-9]+){0,1}(\.[0-9]+){0,2} ')
        set -e
        if [ -n "$DPKG_CLANGS_OUTPUT" ]; then
          DPKG_CLANGS=($(echo "$DPKG_CLANGS_OUTPUT" | awk '{print $2}'))
        else
          DPKG_CLANGS_OUTPUT=""
          DPKG_CLANGS=()
        fi
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        if [ "$DPKG_CLANGS_OUTPUT" != "" ]; then
          DPKG_CLANGS=$(echo "${DPKG_CLANGS[@]}")
          ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
          for DPKG_CLANG in ${DPKG_CLANGS// / }
          do
              if command -v "$DPKG_CLANG" &> /dev/null; then
                CLANG_EXECUTABLES+=" $(which $DPKG_CLANG)"
              elif command -v "/usr/bin/$DPKG_CLANG" &> /dev/null; then
                CLANG_EXECUTABLES+=" /usr/bin/$DPKG_CLANG"
              fi
          done
          ${{ (inputs.trace-commands == 'true' && 'echo CLANG_EXECUTABLES="$CLANG_EXECUTABLES"') || '' }}
          ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
          CLANG_VERSIONS=""
          ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
          for CLANG_EXECUTABLE in ${CLANG_EXECUTABLES// / }
          do
              VERSION_OUTPUT=$("$CLANG_EXECUTABLE" --version)
              regex='[0-9]+\.[0-9]+\.[0-9]+'
              [[ $VERSION_OUTPUT =~ $regex ]]
              CLANG_VERSIONS+=" ${BASH_REMATCH[0]}"
          done
          ${{ (inputs.trace-commands == 'true' && 'echo CLANG_VERSIONS="$CLANG_VERSIONS"') || '' }}
          ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
          echo -E "executables=$CLANG_EXECUTABLES" >> $GITHUB_OUTPUT
          echo "versions=$CLANG_VERSIONS" >> $GITHUB_OUTPUT
        fi

    - name: Find a Clang system version that satisfies the requirements
      uses: alandefreitas/cpp-actions/semver-utils@v1.3.0
      if: ${{ steps.system-versions.outputs.versions != '' }}
      id: system-version
      with:
        version: ${{ steps.system-versions.outputs.versions }}
        satisfies: ${{ steps.strip-version.outputs.version || steps.release-versions.outputs.latest }}
        lenient: true
        trace-commands: ${{ inputs.trace-commands }}

    - name: Setup System Clang
      if: ${{ steps.system-version.outputs.satisfies == 'true' }}
      shell: bash
      id: setup-system-clang
      run: |
        # Setup compatible Clang version from the system versions
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        executables="${{ steps.system-versions.outputs.executables }}"
        versions="${{ steps.system-versions.outputs.versions }}"
        match="${{ (inputs.check-latest == 'true' && steps.system-version.outputs.max-release) || steps.system-version.outputs.min-release }}"
        
        IFS=" " read -r -a executables_array <<< "$executables"
        IFS=" " read -r -a versions_array <<< "$versions"
        
        # Find the index of the matching version
        index=-1
        for ((i=0; i<${#versions_array[@]}; i++))
        do
          if [[ "${versions_array[i]}" == "$match" ]]
          then
            index=$i
            break
          fi
        done
        
        # Find the executable corresponding to the matching version
        if [[ $index != -1 && $index -lt ${#executables_array[@]} ]]
        then
          executable="${executables_array[$index]}"
          filename=$(basename "$executable")
          dirname=$(dirname "$executable")
        
          if [[ "$filename" == clang++* ]]; then
            cc_filename="clang${filename#clang++}"  # Replace clang++ with clang
            cxx_filename="$filename"
          elif [[ "$filename" == clang* ]]; then
            cc_filename="$filename"
            cxx_filename="clang++${filename#clang}"  # Replace clang with clang++
          fi
          cc="$dirname/$cc_filename"
          cxx="$dirname/$cxx_filename"
          echo -E "cc=$cc" >> $GITHUB_OUTPUT
          echo -E "cxx=$cxx" >> $GITHUB_OUTPUT
        
          # Construct paths with the clang destination
          echo -E "bin=$dirname" >> $GITHUB_OUTPUT
          clang_dest="$(dirname $dirname)"
          echo -E "clang_dest=$clang_dest" >> $GITHUB_OUTPUT
        
          echo "version=$match" >> $GITHUB_OUTPUT
        fi

    - name: Find all Clang APT versions
      id: apt-versions
      if: ${{ steps.setup-system-clang.outputs.cxx == '' && steps.setup-path-clang.outputs.cxx == '' }}
      shell: bash
      run: |
        # Find all Clang apt-get versions
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}

        # Look for APT Clang version we can download
        all_apt_versions=""
        all_semver_versions=""
        clang_range_regex1='[0-9]+:([0-9]+)-[0-9]+'
        clang_range_regex2='[0-9]+:([0-9]+\.[0-9]+)-[0-9]+'
        semver_regex='[0-9]+\.[0-9]+\.[0-9]+'
        
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        while read -r line; do
          package_name=$(echo "$line" | awk '{print $1}')
          echo "package_name=$package_name"
          versions=$(apt-cache showpkg "$package_name" | awk '/Dependencies/,/Provides/' | awk '{print $1}' | grep -v -E 'Dependencies|Provides')
          echo "versions=$versions"
          while read -r apt_version; do
            if [[ "$apt_version" =~ $clang_range_regex1 ]]; then
              semver_version="${BASH_REMATCH[1]}.0.0"
              apt_versions+=("$apt_version")
              semver_versions+=("$semver_version")
              all_apt_versions+="$package_name=$apt_version "
              all_semver_versions+="$semver_version "
            elif [[ "$apt_version" =~ $clang_range_regex2 ]]; then
              semver_version="${BASH_REMATCH[1]}.0"
              apt_versions+=("$apt_version")
              semver_versions+=("$semver_version")
              all_apt_versions+="$package_name=$apt_version "
              all_semver_versions+="$semver_version "
            elif [[ $apt_version =~ $semver_regex ]]; then
              semver_version="${BASH_REMATCH[0]}"
              apt_versions+=("$apt_version")
              semver_versions+=("$semver_version")
              all_apt_versions+="$package_name=$apt_version "
              all_semver_versions+="$semver_version "
            else
              echo "Package $package_name - version $apt_version doesn't match a semver version" 
            fi
          done <<< "$versions"
        done < <(apt-cache search '^clang-[0-9.]+$')
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        echo "versions=$all_semver_versions"
        echo "packages=$all_apt_versions"
        
        echo "versions=$all_semver_versions" >> $GITHUB_OUTPUT
        echo "packages=$all_apt_versions" >> $GITHUB_OUTPUT

    - name: Find a Clang APT version that satisfies the requirements
      uses: alandefreitas/cpp-actions/semver-utils@v1.3.0
      if: ${{ steps.setup-system-clang.outputs.cxx == '' && steps.setup-path-clang.outputs.cxx == '' }}
      id: apt-version
      with:
        version: ${{ steps.apt-versions.outputs.versions }}
        satisfies: ${{ steps.strip-version.outputs.version || steps.release-versions.outputs.latest }}
        lenient: true
        trace-commands: ${{ inputs.trace-commands }}

    - name: Setup APT Clang
      if: ${{ steps.apt-version.outputs.satisfies == 'true' }}
      shell: bash
      id: setup-apt-clang
      run: |
        # Setup compatible Clang version from the APT versions
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        versions="${{ steps.apt-versions.outputs.versions }}"
        packages="${{ steps.apt-versions.outputs.packages }}"
        match="${{ (inputs.check-latest == 'true' && steps.apt-version.outputs.max-release) || steps.apt-version.outputs.min-release }}"
        major="${{ (inputs.check-latest == 'true' && steps.apt-version.outputs.max-major) || steps.apt-version.outputs.min-major }}"
        minor="${{ (inputs.check-latest == 'true' && steps.apt-version.outputs.max-minor) || steps.apt-version.outputs.min-minor }}"
        
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        IFS=" " read -r -a packages_array <<< "$packages"
        IFS=" " read -r -a versions_array <<< "$versions"
        
        # Find the index of the package matching version
        index=-1
        for ((i=0; i<${#versions_array[@]}; i++))
        do
          if [[ "${versions_array[i]}" == "$match" ]]
          then
            index=$i
            break
          fi
        done
        ${{ (inputs.trace-commands == 'true' && 'echo index="$index"') || '' }}
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        # Find the package corresponding to the matching version
        if [[ $index != -1 && $index -lt ${#packages_array[@]} ]]
        then
          package="${packages_array[$index]}"
        
          # Determine if apt-get should be called with `sudo`, which is often not the case with containers
          if which sudo >/dev/null 2>&1; then
            if [ $? -eq 0 ]
            then
              sudo_prefix="sudo "
            else
              sudo_prefix=""
            fi
          else
            sudo_prefix=""
          fi
          $sudo_prefix apt-get -o Acquire::Retries=5 install -y "$package"
        
          # find the executable: apt-get should install it as clang-$major
          if command -v "clang++-$major.$minor" &> /dev/null; then
            cxx="$(which "clang++-$major.$minor")"
            cc="$(which "clang-$major.$minor")"
          elif command -v "clang++-$major" &> /dev/null; then
            cxx="$(which "clang++-$major")"
            cc="$(which "clang-$major")"
          elif command -v "clang++" &> /dev/null; then
            cxx="$(which "clang++")"
            cc="$(which "clang")"
          fi
          echo -E "cxx=$cxx" >> $GITHUB_OUTPUT
          echo -E "cc=$cc" >> $GITHUB_OUTPUT
          clang_bin_path="$(dirname $cxx)"
          echo -E "bin=$clang_bin_path" >> $GITHUB_OUTPUT
          clang_dest="$(dirname $clang_bin_path)"
          echo -E "clang_dest=$clang_dest" >> $GITHUB_OUTPUT
          echo "version=$match" >> $GITHUB_OUTPUT
        fi

    - name: Find a Clang release version that satisfies the requirements
      uses: alandefreitas/cpp-actions/semver-utils@v1.3.0
      if: ${{ steps.setup-system-clang.outputs.cxx == '' && steps.setup-path-clang.outputs.cxx == '' && steps.setup-apt-clang.outputs.cxx == '' }}
      id: download-version
      with:
        version: ${{ steps.release-versions.outputs.all-versions }}
        satisfies: ${{ steps.strip-version.outputs.version || steps.release-versions.outputs.latest }}
        lenient: false
        trace-commands: ${{ inputs.trace-commands }}

    - name: Setup Clang
      if: ${{ steps.setup-system-clang.outputs.cxx == '' && steps.setup-path-clang.outputs.cxx == '' && steps.setup-apt-clang.outputs.cxx == '' }}
      shell: bash
      id: setup-clang
      run: |
        # Setup compatible Clang version from LLVM binaries
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        # Stripped version
        all_versions="${{ steps.release-versions.outputs.all-versions }}"
        
        # The version we want to download
        release="${{ (steps.download-version.outputs.satisfied == 'false' && steps.release-versions.outputs.latest) || (inputs.check-latest == 'true' && steps.download-version.outputs.max-release) || steps.download-version.outputs.min-release }}"
        major="${{ (steps.download-version.outputs.satisfied == 'false' && steps.release-versions.outputs.latest) || (inputs.check-latest == 'true' && steps.download-version.outputs.max-major) || steps.download-version.outputs.min-major }}"
        minor="${{ (steps.download-version.outputs.satisfied == 'false' && steps.release-versions.outputs.latest) || (inputs.check-latest == 'true' && steps.download-version.outputs.max-minor) || steps.download-version.outputs.min-minor }}"
        patch="${{ (steps.download-version.outputs.satisfied == 'false' && steps.release-versions.outputs.latest) || (inputs.check-latest == 'true' && steps.download-version.outputs.max-patch) || steps.download-version.outputs.min-patch }}"
        
        # These are the valid Clang versions we consider downloading
        version_candidates="$release"
        semver_regex='([0-9]+)\.([0-9]+)\.([0-9]+)'
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        # Include patched versions if main version is unavailable
        for version in ${all_versions// / }
        do
            [[ $version =~ $semver_regex ]]
            other_major="${BASH_REMATCH[1]}"
            other_minor="${BASH_REMATCH[2]}"
            other_patch="${BASH_REMATCH[3]}"
            if [[ $major -eq $other_major ]] && [[ $minor -eq $other_minor ]] && [[ $patch -ne $other_patch ]]; then
                version_candidates+=" $version"
            fi
        done
        # Include other minor versions if patched version is unavailable
        for version in ${all_versions// / }
        do
            [[ $version =~ $semver_regex ]]
            other_major="${BASH_REMATCH[1]}"
            other_minor="${BASH_REMATCH[2]}"
            other_patch="${BASH_REMATCH[3]}"
            if [[ $major -eq $other_major ]] && [[ $minor -ne $other_minor ]]; then
                version_candidates+=" $version"
            fi
        done
        ${{ (inputs.trace-commands == 'true' && 'echo version_candidates="$version_candidates"') || '' }}
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        # Find ubuntu version
        set +e
        if [ "$ubuntu_version" == "" ]; then
            # Extract Ubuntu version from lsb_release -rs
            ubuntu_version=$(lsb_release -rs)
        fi
        
        if [ "$ubuntu_version" == "" ]; then
            # Extract Ubuntu version from /etc/os-release
            os_release=$(cat /etc/os-release)
            version_regex='VERSION_ID="([^"]+)"'
            if [[ $os_release =~ $version_regex ]]; then
                ubuntu_version=${BASH_REMATCH[1]}
            else
                ubuntu_version="Unknown"
            fi
        fi
        
        if [ "$ubuntu_version" == "" ]; then
            # Extract Ubuntu version from /etc/lsb-release
            lsb_release=$(cat /etc/lsb-release)
            version_regex='DISTRIB_RELEASE=([^ ]+)$'
            if [[ $lsb_release =~ $version_regex ]]; then
                ubuntu_version=${BASH_REMATCH[1]}
            fi
        fi
        
        if [ "$ubuntu_version" == "" ]; then
            # Extract Ubuntu version from uname -a
            uname_output=$(uname -a)
            version_regex='~([0-9]+\.[0-9]+)'
            if [[ $uname_output =~ $version_regex ]]; then
                ubuntu_version=${BASH_REMATCH[1]}
            fi
        fi
        set -e
        echo "ubuntu_version=$ubuntu_version" >> $GITHUB_OUTPUT
        
        if [ "$ubuntu_version" == "" ]; then
            false
        fi

        # Sort ubuntu version binaries according to current ubuntu version
        if [ "$ubuntu_version" == "20.04" ]; then 
          ubuntu_versions=("20.04" "22.04" "18.04" "16.04" "14.04" "12.04" "10.04")
        elif [ "$ubuntu_version" == "18.04" ]; then 
          ubuntu_versions=("18.04" "20.04" "16.04" "22.04" "14.04" "12.04" "10.04")
        elif [ "$ubuntu_version" == "16.04" ]; then 
          ubuntu_versions=("16.04" "18.04" "14.04" "20.04" "12.04" "22.04" "10.04")
        elif [ "$ubuntu_version" == "12.04" ]; then 
          ubuntu_versions=("12.04" "14.04" "10.04" "16.04" "18.04" "20.04" "22.04")
        elif [ "$ubuntu_version" == "10.04" ]; then 
          ubuntu_versions=("10.04" "12.04" "14.04" "16.04" "18.04" "20.04" "22.04")
        else
          ubuntu_versions=("22.04" "20.04" "18.04" "16.04" "14.04" "12.04" "10.04")
        fi
        
        # Find a URL for the binaries
        clang_url_OK=""
        for ubuntu_version in "${ubuntu_versions[@]}"; do
          for version_candidate in ${version_candidates// / }; do
            ubuntu_image="ubuntu-$ubuntu_version"
            clang_basename="clang+llvm-$version_candidate-x86_64-linux-gnu-$ubuntu_image"
            clang_filename="$clang_basename.tar.xz"
        
            clang_url=https://github.com/llvm/llvm-project/releases/download/llvmorg-$version_candidate/$clang_filename
            clang_url_exists=$(curl --silent --fail --head "$clang_url" >/dev/null && echo "true" || echo "false")
            if [ "$clang_url_exists" == "true" ]; then
              clang_url_OK="$clang_url"
              break
            fi
        
            clang_url=https://releases.llvm.org/$version_candidate/$clang_filename
            clang_url_exists=$(curl --silent --fail --head "$clang_url" >/dev/null && echo "true" || echo "false")
            if [ "$clang_url_exists" == "true" ]; then
              clang_url_OK="$clang_url"
              break
            fi
        
            clang_basename="clang+llvm-$version_candidate-linux-x86_64-ubuntu$ubuntu_version"
            clang_filename="$clang_basename.tar.xz"
            clang_url=https://releases.llvm.org/$version_candidate/$clang_filename
            clang_url_exists=$(curl --silent --fail --head "$clang_url" >/dev/null && echo "true" || echo "false")
            if [ "$clang_url_exists" == "true" ]; then
              clang_url_OK="$clang_url"
              break
            fi
          done
          if [ "$clang_url_OK" != "" ]; then
            break
          fi
        done
        
        # The URL is always tar.gz and only x86_64 is supported.
        if [ "$clang_url_OK" != "" ]; then
          echo "clang_basename=$clang_basename" >> $GITHUB_OUTPUT
          echo "clang_filename=$clang_filename" >> $GITHUB_OUTPUT
          echo "clang_url=$clang_url" >> $GITHUB_OUTPUT
          clang_dest="${{runner.tool_cache}}/clang/$version_candidate"
          echo -E "clang_dest=$clang_dest" >> $GITHUB_OUTPUT
          clang_bin_path="$clang_dest/bin"
          echo -E "bin=$clang_bin_path" >> $GITHUB_OUTPUT
          echo -E "cc=$clang_bin_path/clang" >> $GITHUB_OUTPUT
          echo -E "cxx=$clang_bin_path/clang++" >> $GITHUB_OUTPUT
          echo "version=$version_candidate" >> $GITHUB_OUTPUT
        fi

    - name: Clang cache
      if: inputs.cache == 'true' && steps.setup-clang.outputs.clang_url
      id: cache-clang
      uses: actions/cache@v3
      with:
        path: ${{ steps.setup-clang.outputs.clang_dest }}
        key: ${{ steps.setup-clang.outputs.clang_url }}

    - name: Ensure curl is available
      if: ${{ steps.cache-clang.outputs.cache-hit != 'true' && steps.setup-clang.outputs.clang_url }}
      uses: alandefreitas/cpp-actions/package-install@v1.0.0
      with:
        apt-get: curl

    - name: Install Clang
      if: ${{ steps.cache-clang.outputs.cache-hit != 'true' && steps.setup-clang.outputs.clang_url }}
      shell: bash
      id: install-clang
      run: |
        # Install Clang
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        # Download ${{ steps.setup-clang.outputs.clang_url }}
        if command -v curl &> /dev/null; then
          curl -L -o "${{ steps.setup-clang.outputs.clang_filename }}" "${{ steps.setup-clang.outputs.clang_url }}"
        elif command -v wget &> /dev/null; then
          wget -O "${{ steps.setup-clang.outputs.clang_filename }}" "${{ steps.setup-clang.outputs.clang_url }}"
        else
          echo "This action requires either curl or wget to fetch ${{ steps.setup-clang.outputs.clang_filename }}"
          false
        fi
        
        # Unzip binaries
        mkdir -p "${{ steps.setup-clang.outputs.clang_dest }}" || true
        clang_parent_dest="${{runner.tool_cache}}/clang"
        ${{ (inputs.trace-commands == 'true' && format('tar -xvf "{0}" -C "$clang_parent_dest" --transform s/{1}/{2}/', steps.setup-clang.outputs.clang_filename, steps.setup-clang.outputs.clang_basename, steps.setup-clang.outputs.version)) || '' }} 
        ${{ (inputs.trace-commands != 'true' && format('tar -xf "{0}" -C "$clang_parent_dest" --transform s/{1}/{2}/', steps.setup-clang.outputs.clang_filename, steps.setup-clang.outputs.clang_basename, steps.setup-clang.outputs.version)) || '' }}
        
        # Download ${{ steps.setup-clang.outputs.clang_url }}
        if command -v curl &> /dev/null; then
          curl -L -o "clang-libs.tar.xz" "https://github.com/alandefreitas/cpp-actions/releases/download/clang-binaries/clang-libs.tar.xz"
        elif command -v wget &> /dev/null; then
          wget -O "clang-libs.tar.xz" "https://github.com/alandefreitas/cpp-actions/releases/download/clang-binaries/clang-libs.tar.xz"
        else
          false
        fi
        
        # Unzip libs
        ${{ (inputs.trace-commands == 'true' && format('tar -xvf "clang-libs.tar.xz" -C "{0}/lib"', steps.setup-clang.outputs.clang_dest)) || '' }} 
        ${{ (inputs.trace-commands != 'true' && format('tar -xf "clang-libs.tar.xz" -C "{0}/lib"', steps.setup-clang.outputs.clang_dest)) || '' }}
        
        set +e
        if [ "${{ steps.setup-clang.outputs.ubuntu_version }}" != "16.04" ]; then
          rm "${{ steps.setup-clang.outputs.clang_dest }}/lib/libstdc++.so.6"
        fi


    - name: Set up LD_LIBRARY_PATH
      if: ${{ steps.setup-clang.outputs.clang_url }}
      shell: bash
      run: |
        # Set up LD_LIBRARY_PATH
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        # Add shared libraries to LD_LIBRARY_PATH
        clang_dest="${{ steps.setup-clang.outputs.clang_dest }}"
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        ${{ (inputs.trace-commands == 'true' && 'echo -E "LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\""') || '' }}
        while IFS= read -r -d '' dir; do
          if [[ -d "$dir" ]]; then
            for file in "$dir"/*.so.[0-9]*; do
              if [[ -f "$file" ]]; then
                if [[ ! "$LD_LIBRARY_PATH" =~ (^|:)"$dir"$ ]]; then
                  if [[ -n "$LD_LIBRARY_PATH" ]]; then
                     LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$dir"
                     export LD_LIBRARY_PATH
                  else
                     LD_LIBRARY_PATH="$dir"
                     export LD_LIBRARY_PATH
                  fi
              fi
              break
              fi
            done
          fi
        done < <(find "$clang_dest" -type d -print0)
        ${{ (inputs.trace-commands == 'true' && 'echo -E "LD_LIBRARY_PATH=\"$LD_LIBRARY_PATH\""') || '' }}
        
        IFS=':' read -ra paths <<< "$LD_LIBRARY_PATH"
        for path in "${paths[@]}"; do
          if [[ ! -d "$path" ]]; then
            echo "💥 Library path does not exist: $path"
          fi
        done
        
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        export LD_LIBRARY_PATH
        echo -E "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" >> "$GITHUB_ENV"

    - name: Parse Final Clang Setup version
      uses: alandefreitas/cpp-actions/semver-utils@v1.3.0
      id: version
      with:
        version: ${{ steps.setup-clang.outputs.version || steps.setup-apt-clang.outputs.version || steps.setup-system-clang.outputs.version || steps.setup-path-clang.outputs.version }}
        lenient: true
        trace-commands: ${{ inputs.trace-commands }}

    - name: Outputs
      shell: bash
      id: features
      run: |
        # Output information about the Clang we setup up
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }} 
        
        # the Clang version we found or installed
        release="${{ steps.version.outputs.release }}"
        echo "release=$release" >> $GITHUB_OUTPUT
        major="${{ steps.version.outputs.major }}"
        echo "major=$major" >> $GITHUB_OUTPUT
        minor="${{ steps.version.outputs.minor }}"
        echo "minor=$minor" >> $GITHUB_OUTPUT
        patch="${{ steps.version.outputs.patch }}"
        echo "patch=$patch" >> $GITHUB_OUTPUT
        
        # clang++ path
        cxx_path="${{ steps.setup-clang.outputs.cxx || steps.setup-apt-clang.outputs.cxx || steps.setup-system-clang.outputs.cxx || steps.setup-path-clang.outputs.cxx }}"
        echo -E "cxx=$cxx_path" >> $GITHUB_OUTPUT
        
        cc_path="${{ steps.setup-clang.outputs.cc || steps.setup-apt-clang.outputs.cc || steps.setup-system-clang.outputs.cc || steps.setup-path-clang.outputs.cc }}"
        echo -E "cc=$cc_path" >> $GITHUB_OUTPUT
        
        # bin path
        bindir=$(dirname "$cxx_path")
        echo -E "bindir=$bindir" >> $GITHUB_OUTPUT
        
        # install path
        dir=$(dirname "$bindir")
        echo -E "dir=$dir" >> $GITHUB_OUTPUT
        
        if [[ "${{ inputs.update-environment }}" != "false" ]]; then
          PATH="$bindir:$PATH"
          export PATH
          echo -E "$bindir" >> $GITHUB_PATH
        fi
        
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        
        source="Unknown"
        if [ "$cxx_path" == "${{ steps.setup-clang.outputs.cxx }}" ]; then
            source="Action-Provided Binaries"
        elif [ "$cxx_path" == "${{ steps.setup-apt-clang.outputs.cxx }}" ]; then
            source="APT"
        elif [ "$cxx_path" == "${{ steps.setup-system-clang.outputs.cxx }}" ]; then
            source="System Packages"
        elif [ "$cxx_path" == "${{ steps.setup-path-clang.outputs.cxx }}" ]; then
            source="Default Path"
        fi
        
        echo "===================================== "
        echo "Clang Setup from $source"
        echo "===================================== "
        echo "Paths:"
        echo "- cxx_path:    $cxx_path"
        echo "- cc_path:     $cc_path"
        echo "- install dir: $dir"
        echo "- bin dir:     $bindir"
        echo "Version:"
        echo "- release:     $release"
        echo "- major:       $major"
        echo "- minor:       $minor"
        echo "- patch:       $patch"
        echo "===================================== "

