name: 'B2 Workflow'
description: |
  This action runs a complete B2 workflow from Boost source files.
  
  If you are developing a boost library, this is usually the next step in your workflow after setting up a C++ compiler
  and fetching dependencies with xref:actions/package-install.adoc[].
  
  It takes the Boost source directory and does whatever it needs to test the specified modules. This includes 
  compiling `b2` if needed and generating a proper `user-config.jam` file.
  
  This action is particularly useful for Boost library proposals.
  
  == Next steps
  
  If you're library also supports CMake, the next step in your workflow should usually be 
  xref:actions/cmake-workflow.adoc[]. Otherwise, the next step in your workflow should usually be
  the generation of reports, with tools such as the xref:actions/flamegraph.adoc[] (when `matrix.time-trace`) and 
  xref:actions/create-changelog.adoc[] (usually in another workflow job). You can also include customs steps to
  upload coverage reports (when `matrix.coverage`).
  
  If your b2 workflow provides CMake installation and configuration scripts, it is also usual to include multiple
  CMake workflow steps as integration tests for CMake.

inputs:
  source-dir:
    description: 'The boost source directory.'
    required: false
    default: '.'
  build-variant:
    description: |
      Custom build variants. If the provided variant is a CMake build-type, the 
      argument is mapped to the equivalent b2 variant:
      
      - `Release` -> `release`
      
      - `Debug` -> `debug`
      
      - `RelWithDebInfo` -> `profile`
      
      - `<other>` -> lowercase <other>

    required: false
    default: ''
  modules:
    description: 'The list of modules we should test.'
    required: true
    default: ''
  toolset:
    description: 'Toolset name.'
    required: false
    default: ''
  address-model:
    description: 'Valid b2 list of address models.'
    required: false
    default: ''
  cxx:
    description: 'Path to C++ compiler.'
    required: false
    default: ''
  cxxflags:
    description: 'Extra C++ compiler flags.'
    required: false
    default: ''
  ccflags:
    description: 'Extra C compiler flags.'
    required: false
    default: ''
  shared:
    description: 'Build shared libraries.'
    required: false
    default: ''
  asan:
    description: 'Enable address-sanitizer.'
    required: false
    default: ''
  ubsan:
    description: 'Enable undefined-sanitizer.'
    required: false
    default: ''
  tsan:
    description: 'Enable thread-sanitizer.'
    required: false
    default: ''
  coverage:
    description: 'Enable coverage.'
    required: false
    default: ''
  linkflags:
    description: 'Extra linker flags.'
    required: false
    default: ''
  cxxstd:
    description: 'List of standards with which b2 will build and test the program.'
    required: false
    default: ''
  threading:
    description: 'b2 threading option.'
    required: false
    default: ''
  rtti:
    description: |
      Enables or disables run-time type information.
    required: false
    default: ''
  trace-commands:
    description: 'Trace commands executed by the workflow.'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Get CPU cores
      uses: SimenB/github-actions-cpu-cores@v1
      id: cpu-cores

    - name: Set toolset compiler
      working-directory: ${{ inputs.source-dir }}
      shell: bash
      run: |
        # Bootstrap headers
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        # Set the compiler the toolset should use
        if [ -n "${{ inputs.cxx }}" ] && [ -n "${{ inputs.toolset }}" ]; then
          cxx="${{ inputs.cxx }}"
          cxx="${cxx//\\/\\\\}"  # Replace single backslashes with double backslashes
          toolset="${{ inputs.toolset }}"
          if [[ $toolset != "clang-win" ]]; then
              echo -n "using $toolset : : \"$cxx\" ;" > ~/user-config.jam
          fi
        fi

    - name: Bootstrap
      working-directory: ${{ inputs.source-dir }}
      shell: bash
      run: |
        # Bootstrap headers
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        if [ -f "./bootstrap.sh" ]; then
          ./bootstrap.sh
          ./b2 headers
        fi

    - name: B2 Workflow
      working-directory: ${{ inputs.source-dir }}
      shell: bash
      run: |
        # B2 Workflow
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        B2_ARGS+=(${{ (steps.cpu-cores.outputs.count != '1' && format('"-j" "{0}"', steps.cpu-cores.outputs.count)) || '' }})
        B2_ARGS+=(${{ (inputs.toolset && format('"toolset={0}"', inputs.toolset)) || '' }})
        B2_ARGS+=(${{ (inputs.address-model && format('"address-model={0}"', inputs.address-model)) || '' }})
        B2_ARGS+=(${{ (inputs.cxxstd && format('"cxxstd={0}"', inputs.cxxstd)) || '' }})
        
        build_variant="${{ inputs.build-variant }}"
        if [ "${{ inputs.build-variant }}" != "" ]; then
            build_variant=$(echo "$build_variant" | tr '[:upper:]' '[:lower:]')
            if [ "$build_variant" == "relwithdebinfo" ]; then
                build_variant="profile"
            fi
            B2_ARGS+=("variant=$build_variant")
        fi
        
        B2_ARGS+=(${{ (inputs.threading && format('"threading={0}"', inputs.threading)) || '' }})
        B2_ARGS+=(${{ (inputs.cxxflags && format('"cxxflags={0}"', inputs.cxxflags)) || '' }})
        B2_ARGS+=(${{ (inputs.ccflags && format('"cflags={0}"', inputs.ccflags)) || '' }})
        B2_ARGS+=(${{ (inputs.rtti == 'true' && '"rtti=on"') || (inputs.rtti == 'false' && '"rtti=off"') || '' }})
        B2_ARGS+=(${{ (inputs.shared == 'true' && '"link=shared"') || '' }})
        B2_ARGS+=(${{ (inputs.asan == 'true' && '"address-sanitizer=on"') || '' }})
        ${{ (inputs.ubsan == 'true' && 'export UBSAN_OPTIONS="print_stacktrace=1"') || '' }}
        # B2_ARGS+=(${{ (inputs.ubsan == 'true' && '"cxxflags=-fsanitize=undefined -fno-sanitize-recover=undefined" "linkflags=-fsanitize=undefined" "define=UBSAN=1" "debug-symbols=on" "visibility=global"') || '' }})
        B2_ARGS+=(${{ (inputs.ubsan == 'true' && '"undefined-sanitizer=on"') || '' }})
        B2_ARGS+=(${{ (inputs.tsan == 'true' && '"thread-sanitizer=on"') || '' }})
        B2_ARGS+=(${{ (inputs.coverage == 'true' && '"coverage=on"') || '' }})
        B2_ARGS+=(${{ (inputs.linkflags && format('"linkflags={0}"', inputs.linkflags)) || '' }})
        toolset="${{ inputs.toolset }}"
        if [[ "$toolset" == "clang-win" ]]; then
          B2_ARGS+=("embed-manifest-via=linker")
        fi
         
        modules="${{ inputs.modules }}"
        for module in ${modules//,/ }
        do
            B2_ARGS+=("libs/$module/test")
        done
        
        set -x        
        ./b2 "${B2_ARGS[@]}"
        set +x
