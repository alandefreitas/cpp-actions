name: 'B2 Workflow'
description: |
  This action runs a complete B2 workflow from Boost source files.
  
  If you are developing a Boost library, this is usually the next step in your workflow after setting up a C++ compiler
  and fetching dependencies with xref:actions/package-install.adoc[].
  
  It takes the Boost source directory and runs the usual steps to test the specified modules. This includes 
  compiling `b2` if needed and generating a proper `user-config.jam` file.
  
  This action is particularly useful for Boost library proposals, where B2 is mandatory. It assumes
  the library being tested is in the `libs` directory of the Boost super-project and that
  `source-dir` is the root of the super-project.
  
  == Next steps
  
  If your library also supports CMake, the next step in your workflow should usually be 
  xref:actions/cmake-workflow.adoc[]. Otherwise, the next step in your workflow should usually be
  the generation of reports, with tools such as the xref:actions/flamegraph.adoc[] (when `matrix.time-trace`) and 
  xref:actions/create-changelog.adoc[] (usually in another workflow job). You can also include customs steps to
  upload coverage reports (when `matrix.coverage`).
  
  If your b2 workflow provides CMake installation and configuration scripts, it is also usual to include multiple
  CMake workflow steps as integration tests for CMake.

inputs:
  # ======================================
  # Configure options
  # ======================================
  source-dir:
    description: |
      The boost source directory.
      
      This path will be used to build and install `B2` for the workflow
      and test the specified modules.

    required: false
    default: '.'
  cxx:
    description: |
      Path to C++ compiler.
      
      If the input is not specified, the action will use the compiler defined by the environment variable `CXX`.
      
      If the environment variable is not specified, the action will use the default compiler as identified by B2.
    required: false
    default: ''
  cxxflags:
    description:
      Flags to be used with the C++ compiler.
      
      If the input is not specified, the action will use the flags defined by the environment variable `CXXFLAGS`.
      
      If the environment variable is not specified, the action will use the default flags as identified by B2.

    required: false
    default: ''
  ccflags:
    description: |
      Flags to be used with the C compiler.
      
      If the input is not specified, the action will use the flags defined by the environment variable `CFLAGS`.
      
      If the environment variable is not specified, the action will use the default flags as identified by B2.

    required: false
    default: ''
  cxxstd:
    description: |
      Comma-separated list of standards with which B2 will build and test the program.
      
      If the input is not specified, the action will use the standards defined by the environment variable `CXXSTD`.
      
      If the environment variable is not specified, the action will use the default standards as identified by B2.
      
      B2 will iteratively build and test the specified modules with multiple standards.
    required: false
    default: ''
  shared:
    description: |
      Determines if the `link` option should be `shared` so that it creates shared libraries.
      
      If the input is not specified, the action will use the value defined by the environment variable `BUILD_SHARED_LIBS`.
      
      If the environment variable is not specified, the action will use the default value as identified by B2.
    required: false
    default: ''
  toolset:
    description: |
      B2 toolset name. The toolset is somewhat equivalent to a CMake generator.
      
      If not specified, the action will use the toolset defined by the environment variable `B2_TOOLSET`.
      
      If the environment variable is not specified, the action will use the default toolset detected by B2.

    required: false
    default: ''

  build-variant:
    description: |
      Custom build variants. If the provided variant is a CMake build-type, the 
      argument is mapped to the equivalent B2 variant:
      
      - `Release` -> `release`
      
      - `Debug` -> `debug`
      
      - `RelWithDebInfo` -> `release` with `debug-symbols=on`
      
      - `<other>` -> lowercase <other>
      
      If the input is not specified, the action will use the value defined by the environment variable `B2_BUILD_VARIANT`.
      
      If the environment variable is not specified, the action will use the value from `build-type`.

    required: false
    default: ''

  build-type:
    description: |
      An alternative to `build-variant`, for compatibility with CMake workflows. When `build-variant` is not provided,
      this input is used to set the build variant.
      
      If the input is not specified, the action will use the value defined by the environment variable `B2_BUILD_TYPE`.
      
      If the environment variable is not specified, the action will use the default value as identified by B2.

    required: false
    default: ''

  modules:
    description: |
      The list of modules we should test with B2 in the `libs` directory of the Boost super-project.
      
      The directory `libs/<module>/test` will be provided for each module in the list.

    required: true
    default: ''

  # ======================================
  # B2-specific options
  # ======================================
  address-model:
    description: 'Valid B2 list of address models.'
    required: false
    default: ''
  asan:
    description: 'Enable address-sanitizer.'
    required: false
    default: ''
  ubsan:
    description: 'Enable undefined-sanitizer.'
    required: false
    default: ''
  tsan:
    description: 'Enable thread-sanitizer.'
    required: false
    default: ''
  coverage:
    description: 'Enable coverage.'
    required: false
    default: ''
  linkflags:
    description: 'Extra linker flags.'
    required: false
    default: ''
  threading:
    description: 'B2 threading option.'
    required: false
    default: ''
  rtti:
    description: |
      Enables or disables run-time type information.
    required: false
    default: ''

  # ======================================
  # Configure and Install options
  # ======================================

  # ======================================
  # Build options
  # ======================================
  jobs:
    description: |
      Number of jobs to use in parallel builds.
      
      If the input is not specified, the action will use the value defined by the environment variable `B2_JOBS`.
      
      If the environment variable is also not specified, the action will use the number of processors available in the 
      system.

    required: false
    default: ''

  # ======================================
  # Test options
  # ======================================

  # ======================================
  # Install options
  # ======================================

  # ======================================
  # Annotation options
  # ======================================
  trace-commands:
    description: 'Trace commands executed by the workflow.'
    required: false
    default: 'false'

runs:
  using: 'node16'
  main: 'dist/index.js'
  post-if: success()
branding:
  icon: 'code'
  color: 'yellow'
