name: CI

on:
  pull_request:
    branches:
      - master
      - develop
  push:
    branches:
      - '*'
    tags:
      - "v*.*.*"

concurrency:
  group: ${{format('{0}:{1}', github.repository, github.ref)}}
  cancel-in-progress: true

env:
  GIT_FETCH_JOBS: 8
  NET_RETRY_COUNT: 5
  DEFAULT_BUILD_VARIANT: debug,release

jobs:
  cpp-matrix:
    runs-on: ubuntu-latest
    name: Generate Test Matrix
    outputs:
      matrix: ${{ steps.cpp-matrix.outputs.matrix }}
    steps:
      - name: Clone cpp-actions
        uses: actions/checkout@v3

      - name: Generate Test Matrix
        uses: ./cpp-matrix
        id: cpp-matrix
        with:
          standards: '>=11'
          latest-factors: |
            gcc Coverage TSan UBSan Fetch-Content
          factors: |
            gcc Asan Shared No-Deps
            msvc Shared x86
            clang Time-Trace
            mingw Shared
          trace-commands: true

  build:
    needs: cpp-matrix

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJSON(needs.cpp-matrix.outputs.matrix) }}

    defaults:
      run:
        shell: bash

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runs-on }}
    container: ${{matrix.container}}
    timeout-minutes: 30
    permissions:
      contents: write

    steps:
      - name: Clone cpp-actions
        uses: actions/checkout@v3

      # Set up the compiler before package-install in case one of the packages needs a compiler
      - name: Setup C++
        uses: ./setup-cpp
        id: setup-cpp
        with:
          compiler: ${{ matrix.compiler }}
          version: ${{ matrix.version }}
          trace-commands: true

      - name: Install packages
        uses: ./package-install
        id: package-install
        with:
          vcpkg: ${{ (!matrix.fetch-content && 'fmt') || '' }}
          vcpkg-triplet: ${{ ( runner.os == 'Windows' && matrix.x86 && 'x86-windows' ) || '' }}
          apt-get: ${{ matrix.install }}
          apt-get-ignore-missing: ${{ matrix.container && 'true' }}
          cc: ${{ steps.setup-cpp.outputs.cc || matrix.cc }}
          ccflags: ${{ matrix.ccflags }}
          cxx: ${{ steps.setup-cpp.outputs.cxx || matrix.cxx }}
          cxxflags: ${{ matrix.cxxflags }}
          trace-commands: true

      - name: Clone Boost.Variant2
        uses: ./boost-clone
        id: boost-clone
        with:
          branch: master
          modules: variant2
          modules-scan-paths: 'test'
          modules-exclude-paths: ''
          trace-commands: true

      - name: B2 Workflow
        if: ${{ ! matrix.time-trace && ! matrix.coverage }}
        uses: ./b2-workflow
        with:
          source-dir: ${{ steps.boost-clone.outputs.boost-dir }}
          modules: variant2
          toolset: ${{ matrix.b2-toolset }}
          build-variant: ${{ matrix.build-type }}
          cxx: ${{ steps.setup-cpp.outputs.cxx || matrix.cxx || '' }}
          cxxstd: ${{ matrix.cxxstd }}
          address-model: ${{ (matrix.x86 && '32') || '64' }}
          asan: ${{ matrix.asan }}
          ubsan: ${{ matrix.ubsan }}
          tsan: ${{ matrix.tsan }}
          shared: ${{ matrix.shared }}
          trace-commands: true

      - name: CMake Workflow
        uses: ./cmake-workflow
        with:
          cmake-version: '>=3.20'
          source-dir: tests
          generator: ${{ matrix.generator }}
          toolchain: ${{ steps.package-install.outputs.vcpkg-toolchain }}
          build-type: ${{ matrix.build-type }}
          run-tests: true
          install-prefix: $GITHUB_WORKSPACE/.local
          cxxstd: ${{ matrix.cxxstd }}
          cc: ${{ steps.setup-cpp.outputs.cc || matrix.cc }}
          ccflags: ${{ matrix.ccflags }}
          cxx: ${{ steps.setup-cpp.outputs.cxx || matrix.cxx }}
          cxxflags: ${{ matrix.cxxflags }}
          shared: ${{ matrix.shared }}
          extra-args: ${{ ( !matrix.no-deps && format('-D BOOST_SRC_DIR="{0}"', steps.boost-clone.outputs.boost-dir) ) || '' }} ${{ ( matrix.no-deps && '-D CPP_ACTIONS_NO_DEPS=ON' ) || '' }}
          export-compile-commands: ${{ matrix.time-trace }}
          package: true
          package-artifact: ${{ matrix.is-main }}
          ref-source-dir: .
          trace-commands: true

      - name: FlameGraph
        uses: ./flamegraph
        if: matrix.time-trace
        with:
          source-dir: tests
          build-dir: tests/build
          github_token: ${{ secrets.GITHUB_TOKEN }}
          trace-commands: true

      - name: Codecov
        if: ${{ matrix.coverage }}
        run: |
          set -x
          gcov_tool="gcov"
          if command -v "gcov-${{ steps.setup-cpp.outputs.version-major }}.${{ steps.setup-cpp.outputs.version-minor }}" &> /dev/null; then
              gcov_tool="gcov"
          elif command -v "gcov-${{ steps.setup-cpp.outputs.version-major }}" &> /dev/null; then
              gcov_tool="gcov-${{ steps.setup-cpp.outputs.version-major }}"
          fi
          lcov -c -q -o "./tests/build/coverage.info" -d "./tests/build" --include "$(pwd)/*" --gcov-tool "$gcov_tool"
          # genhtml --legend -f -q "./tests/build/coverage.info" -p "./tests" -o "./tests/build/coverage_html"
          cat "./tests/build/coverage.info"
          
          bash <(curl -s https://codecov.io/bash) -f "./tests/build/coverage.info"
          
          echo "# Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[![codecov](https://codecov.io/github/$GITHUB_REPOSITORY/commit/$GITHUB_SHA/graphs/sunburst.svg)](https://codecov.io/github/$GITHUB_REPOSITORY/commit/$GITHUB_SHA)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Commit: [![codecov](https://codecov.io/github/$GITHUB_REPOSITORY/commit/$GITHUB_SHA/graph/badge.svg)](https://codecov.io/github/$GITHUB_REPOSITORY/commit/$GITHUB_SHA)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Branch: [![codecov](https://codecov.io/github/$GITHUB_REPOSITORY/branch/$GITHUB_REF_NAME/graph/badge.svg)](https://codecov.io/github/$GITHUB_REPOSITORY/commit/$GITHUB_SHA)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

  docs:
    needs: build
    if: ${{ github.event_name == 'push' && (contains(fromJSON('["master", "develop"]'), github.ref_name) || startsWith(github.ref, 'refs/tags/')) }}
    defaults:
      run:
        shell: bash

    name: Docs and Release
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    permissions:
      contents: write

    steps:
      - name: Clone cpp-actions
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Generate site
        working-directory: docs
        run: |
          npm install
          npx antora antora-playbook.yml

      - name: Publish to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build/site

      - name: Changelog
        uses: ./create-changelog
        with:
          output-path: CHANGELOG.md
          thank-non-regular: ${{ startsWith(github.ref, 'refs/tags/') }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          trace-commands: true

      - name: Remove existing branch release
        if: github.ref_name != 'develop' && !startsWith(github.ref, 'refs/tags/')
        uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          tag_name: ${{ github.ref_name || github.ref }}-release
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true

      - name: Create Release
        if: github.ref_name != 'develop'
        uses: softprops/action-gh-release@v1
        with:
          files: LICENSE
          name: ${{ github.ref_name || github.ref }}
          tag_name: ${{ github.ref_name || github.ref }}${{ ((!startsWith(github.ref, 'refs/tags/')) && '-release') || '' }}
          body_path: CHANGELOG.md
          prerelease: false
          draft: false
          token: ${{ github.token }}

      - name: Delete draft branch releases
        uses: dev-drprasad/delete-older-releases@v0.2.1
        if: github.ref_name != 'develop' && !startsWith(github.ref, 'refs/tags/')
        with:
          keep_latest: 1
          delete_tag_pattern: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
