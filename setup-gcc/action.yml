name: "Setup GCC"
description: |
  Set up a specific version of a GCC compiler and add it to the PATH.
  In most workflows, this is used as an auxiliary action for the setup-cpp action.
  
  This allows us to test a C++ library with any GCC version, and not only the versions 
  circumstantially provided by apt-get.
  
  This action uses a number of alternatives to find or install GCC:
  
  - The GCC path provided to 'path'
  - Any other version of GCC it can find in the system
  - Any other version of GCC available from APT
  - A version of GCC from our own binary releases
  
  The action will *not* attempt to install GCC from source files, which is the only 
  officially supported method but impossible to run in CI because the machines would take
  hours to do that.
  
  If a version of GCC is not available by any other methods above, the GCC binaries for
  a given platform can be built locally with a 
  https://github.com/alandefreitas/cpp-actions/tree/develop/setup-gcc[script,window="_blank"]
  provided in this repository and added to our binary release. 

inputs:
  version:
    description: |
      Version range or exact version of GCC to use, using SemVer's version range syntax. 
      
      By default, it uses any version available in the environment.

    required: false
    default: '*'

  path:
    description: 'The gcc or g++ executable. We attempt to find GCC at this path first.'
    required: false
    default: 'g++'

  cache:
    description: |
      Used to specify whether the GCC installation should be cached in the case GCC needs to be downloaded."
    required: false
    default: 'false'

  architecture:
    description: |
      The target architecture (x86, x64). By default, this value is inferred.
    required: false
    default: ''

  check-latest:
    description: |
      By default, when GCC is not available, this action will install the minimum version in the version spec.
      This ensures the code respects its contract in terms of what minimum GCC version is supported.
      
      Set this option if you want the action to check for the latest available version that satisfies the version spec
      instead.
    required: false
    default: 'false'

  update-environment:
    description: "Set this option if you want the action to update environment variables."
    required: false
    default: 'true'

  trace-commands:
    description: 'Trace commands executed by the workflow.'
    required: false
    default: 'false'

outputs:
  cc:
    description: "The absolute path to the gcc executable."
    value: ${{ steps.features.outputs.cc }}

  cxx:
    description: "The absolute path to the g++ executable."
    value: ${{ steps.features.outputs.cxx }}

  dir:
    description: "The absolute path to the GCC directory containing the executable."
    value: ${{ steps.features.outputs.dir }}

  version:
    description: "The installed GCC version. Useful when given a version range as input."
    value: ${{ steps.version.outputs.release }}

  version-major:
    description: "The installed GCC version major. Useful when given a version range as input."
    value: ${{ steps.version.outputs.major }}

  version-minor:
    description: "The installed GCC version minor. Useful when given a version range as input."
    value: ${{ steps.version.outputs.minor }}

  version-patch:
    description: "The installed GCC version patch. Useful when given a version range as input."
    value: ${{ steps.version.outputs.patch }}

  cache-hit:
    description: "A boolean value to indicate a cache entry was found"
    value: ${{ steps.cache-gcc.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Extract version from compiler prefixed string
      id: strip-version
      shell: bash
      run: |
        # Strip version from input prefixed string
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        version="${{ inputs.version }}"
        
        # Remove "gcc-" or "g++-" prefix
        if [[ "$version" == gcc-* ]] || [[ "$version" == g++-* ]]; then
        version="${version#gcc-}"
        version="${version#g++-}"
        fi
        
        # Remove "gcc " or "g++ " prefix
        if [[ "$version" == gcc\ * ]] || [[ "$version" == g++\ * ]]; then
        version="${version#gcc }"
        version="${version#g++ }"
        fi
        
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Ensure git is available
      uses: alandefreitas/cpp-actions/package-install@v1.0.0
      with:
        apt-get: git

    - name: Find all GCC Release Versions
      id: release-versions
      shell: bash
      run: |
        # Find all GCC Release Versions
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        # Download the Git tags from the GCC repository
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        git_tags=$(git ls-remote --tags git://gcc.gnu.org/git/gcc.git | awk '{print $2}' | cut -d '/' -f 4)
        ${{ (inputs.trace-commands == 'true' && 'echo "git_tags=$git_tags"  | tr "\n" " "') || '' }}
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        # Extract the version numbers from the Git tags using a regular expression
        regex='^gcc-([0-9]+\.[0-9]+\.[0-9]+)$'
        versions=()
        all_versions=""
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        for tag in $git_tags
        do
          if [[ $tag =~ $regex ]]; then
            version=${BASH_REMATCH[1]}
            versions+=("$version")
            all_versions+="$version "
          fi
        done
        echo "GCC versions: $all_versions"
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        sort_arg="${{ (inputs.check-latest == 'true' && '-rV') || '-V' }}"
        all_versions=$(echo "$all_versions" | tr ' ' '\n' | sort "$sort_arg" | paste -s -d ' ')
        
        # Sort the version numbers using the "sort -V" command and pick the latest one
        if [ ${#versions[@]} -gt 0 ]; then
          latest_version=$(printf "%s\n" "${versions[@]}" | sort -V | tail -n1)
        else
          latest_version="13.1.0" # placeholder when the tags fail. Should not happen.
        fi
        
        echo "all-versions=$all_versions" >> $GITHUB_OUTPUT
        echo "latest=$latest_version" >> $GITHUB_OUTPUT

    - name: System Path GCC Version
      id: find-path-version
      if: ${{ inputs.path }}
      shell: bash
      run: |
        # Find GCC Path Versions
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}

        # Look for system GCC executables
        GCC_EXECUTABLE="${{ inputs.path }}"
        if command -v "$GCC_EXECUTABLE" &> /dev/null; then
          VERSION_OUTPUT=$("$GCC_EXECUTABLE" --version)
          regex='[0-9]+\.[0-9]+\.[0-9]+'
          [[ $VERSION_OUTPUT =~ $regex ]]
          GCC_VERSION="${BASH_REMATCH[0]}"
        
          if [ "$GCC_VERSION" != "" ]; then
            echo -E "executable=$(which $GCC_EXECUTABLE)" >> $GITHUB_OUTPUT
            echo "version=$GCC_VERSION" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Check if path GCC version satisfies the requirements
      uses: alandefreitas/cpp-actions/semver-utils@v1.1.0
      if: ${{ steps.find-path-version.outputs.version != '' }}
      id: path-version
      with:
        version: ${{ steps.find-path-version.outputs.version }}
        satisfies: ${{ steps.strip-version.outputs.version || steps.release-versions.outputs.latest }}
        lenient: true

    - name: Setup System GCC
      if: ${{ steps.path-version.outputs.satisfies == 'true' }}
      shell: bash
      id: setup-path-gcc
      run: |
        # Setup compatible GCC version from the path input variable
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        executable="${{ steps.find-path-version.outputs.executable }}"
        version="${{ steps.path-version.outputs.release }}"
        
        # Find corresponding g++ / gcc pair
        filename=$(basename "$executable")
        dirname=$(dirname "$executable")
        if [[ "$filename" == g++* ]]; then
          cc_filename="gcc${filename#g++}"  # Replace g++ with gcc
          cxx_filename="$filename"
        elif [[ "$filename" == gcc* ]]; then
          cc_filename="$filename"
          cxx_filename="g++${filename#gcc}"  # Replace gcc with g++
        fi
        cc="$dirname/$cc_filename"
        cxx="$dirname/$cxx_filename"
        
        # Make sure the versions match
        cc_version=$("$cc" --version)
        regex='[0-9]+\.[0-9]+\.[0-9]+'
        [[ $cc_version =~ $regex ]]
        cc_version="${BASH_REMATCH[0]}"
        
        cxx_version=$("$cxx" --version)
        regex='[0-9]+\.[0-9]+\.[0-9]+'
        [[ $cxx_version =~ $regex ]]
        cxx_version="${BASH_REMATCH[0]}"
        
        if [ "$cc_version" == "$cxx_version" ]; then
          echo -E "bin=$dirname" >> $GITHUB_OUTPUT
          gcc_dest="$(dirname "$dirname")"
          echo -E "gcc_dest=$gcc_dest" >> $GITHUB_OUTPUT
          echo -E "cc=$cc" >> $GITHUB_OUTPUT
          echo -E "cxx=$cxx" >> $GITHUB_OUTPUT
          echo "version=$version" >> $GITHUB_OUTPUT
        fi

    - name: Find all GCC System Versions
      id: system-versions
      if: ${{ steps.setup-path-gcc.outputs.cxx == '' }}
      shell: bash
      run: |
        # Find all GCC System Versions
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}

        # Look for system GCC executables
        GCC_EXECUTABLES=""
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        DPKG_OUTPUT=$(dpkg --list)
        if echo "$DPKG_OUTPUT" | grep -q 'g++'; then
          DPKG_GCCS_OUTPUT=$(echo "$DPKG_OUTPUT" | grep 'g++')
          DPKG_GCCS=($(echo "$DPKG_GCCS_OUTPUT" | awk '{print $2}'))
        else
          DPKG_GCCS_OUTPUT=""
          DPKG_GCCS=()
        fi
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        if [ "$DPKG_GCCS_OUTPUT" != "" ]; then
          DPKG_GCCS=$(echo "${DPKG_GCCS[@]}")
          ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
          for DPKG_GCC in ${DPKG_GCCS// / }
          do
              if command -v "$DPKG_GCC" &> /dev/null; then
                GCC_EXECUTABLES+=" $(which $DPKG_GCC)"
              elif command -v "/usr/bin/$DPKG_GCC" &> /dev/null; then
                GCC_EXECUTABLES+=" /usr/bin/$DPKG_GCC"
              fi
          done
          ${{ (inputs.trace-commands == 'true' && 'echo GCC_EXECUTABLES="$GCC_EXECUTABLES"') || '' }}
          ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
  
          GCC_VERSIONS=""
          ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
          for GCC_EXECUTABLE in ${GCC_EXECUTABLES// / }
          do
              VERSION_OUTPUT=$("$GCC_EXECUTABLE" --version)
              regex='[0-9]+\.[0-9]+\.[0-9]+'
              [[ $VERSION_OUTPUT =~ $regex ]]
              GCC_VERSIONS+=" ${BASH_REMATCH[0]}"
          done
          ${{ (inputs.trace-commands == 'true' && 'echo GCC_VERSIONS="$GCC_VERSIONS"') || '' }}
          ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
  
          echo -E "executables=$GCC_EXECUTABLES" >> $GITHUB_OUTPUT
          echo "versions=$GCC_VERSIONS" >> $GITHUB_OUTPUT
        fi

    - name: Find a GCC system version that satisfies the requirements
      uses: alandefreitas/cpp-actions/semver-utils@v1.1.0
      if: ${{ steps.system-versions.outputs.versions != '' }}
      id: system-version
      with:
        version: ${{ steps.system-versions.outputs.versions }}
        satisfies: ${{ steps.strip-version.outputs.version || steps.release-versions.outputs.latest }}
        lenient: true

    - name: Setup System GCC
      if: ${{ steps.system-version.outputs.satisfies == 'true' }}
      shell: bash
      id: setup-system-gcc
      run: |
        # Setup compatible GCC version from the system versions
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        executables="${{ steps.system-versions.outputs.executables }}"
        versions="${{ steps.system-versions.outputs.versions }}"
        match="${{ (inputs.check-latest == 'true' && steps.system-version.outputs.max-release) || steps.system-version.outputs.min-release }}"
        
        IFS=" " read -r -a executables_array <<< "$executables"
        IFS=" " read -r -a versions_array <<< "$versions"
        
        # Find the index of the matching version
        index=-1
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        for ((i=0; i<${#versions_array[@]}; i++))
        do
          if [[ "${versions_array[i]}" == "$match" ]]
          then
            index=$i
            break
          fi
        done
        ${{ (inputs.trace-commands == 'true' && 'echo index="$index"') || '' }}
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        # Find the executable corresponding to the matching version
        if [[ $index != -1 && $index -lt ${#executables_array[@]} ]]
        then
          executable="${executables_array[$index]}"
          filename=$(basename "$executable")
          dirname=$(dirname "$executable")
        
          if [[ "$filename" == g++* ]]; then
            cc_filename="gcc${filename#g++}"  # Replace g++ with gcc
            cxx_filename="$filename"
          elif [[ "$filename" == gcc* ]]; then
            cc_filename="$filename"
            cxx_filename="g++${filename#gcc}"  # Replace gcc with g++
          fi
          cc="$dirname/$cc_filename"
          cxx="$dirname/$cxx_filename"
          echo -E "cc=$cc" >> $GITHUB_OUTPUT
          echo -E "cxx=$cxx" >> $GITHUB_OUTPUT
        
          # Construct paths with the gcc destination
          echo -E "bin=$dirname" >> $GITHUB_OUTPUT
          gcc_dest="$(dirname $dirname)"
          echo -E "gcc_dest=$gcc_dest" >> $GITHUB_OUTPUT
        
          echo "version=$match" >> $GITHUB_OUTPUT
        fi
        
    - name: Find all GCC APT versions
      id: apt-versions
      if: ${{ steps.setup-system-gcc.outputs.cxx == '' && steps.setup-path-gcc.outputs.cxx == '' }}
      shell: bash
      run: |
        # Find all GCC apt-get versions
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}

        # Look for APT GCC version we can download
        all_apt_versions=""
        all_semver_versions=""
        semver_regex='[0-9]+\.[0-9]+\.[0-9]+'
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        while read -r line; do
          package_name=$(echo "$line" | awk '{print $1}')
          versions=$(apt-cache showpkg "$package_name" | awk '/Dependencies/,/Provides/' | awk '{print $1}' | grep -v -E 'Dependencies|Provides')
          while read -r apt_version; do
           if [[ $apt_version =~ $semver_regex ]]; then
             semver_version=$(echo "$apt_version" | cut -d '-' -f 1)
             apt_versions+=("$apt_version")
             semver_versions+=("$semver_version")
             all_apt_versions+="$package_name=$apt_version "
             all_semver_versions+="$semver_version "
           fi
          done <<< "$versions"
        done < <(apt-cache search '^g\+\+-[0-9.]+$')
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        echo "versions=$all_semver_versions"
        echo "packages=$all_apt_versions"
        
        echo "versions=$all_semver_versions" >> $GITHUB_OUTPUT
        echo "packages=$all_apt_versions" >> $GITHUB_OUTPUT

    - name: Find a GCC APT version that satisfies the requirements
      uses: alandefreitas/cpp-actions/semver-utils@v1.1.0
      if: ${{ steps.setup-system-gcc.outputs.cxx == '' && steps.setup-path-gcc.outputs.cxx == '' }}
      id: apt-version
      with:
        version: ${{ steps.apt-versions.outputs.versions }}
        satisfies: ${{ steps.strip-version.outputs.version || steps.release-versions.outputs.latest }}
        lenient: true

    - name: Setup APT GCC
      if: ${{ steps.apt-version.outputs.satisfies == 'true' }}
      shell: bash
      id: setup-apt-gcc
      run: |
        # Setup compatible GCC version from the APT versions
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        versions="${{ steps.apt-versions.outputs.versions }}"
        packages="${{ steps.apt-versions.outputs.packages }}"
        match="${{ (inputs.check-latest == 'true' && steps.apt-version.outputs.max-release) || steps.apt-version.outputs.min-release }}"
        major="${{ (inputs.check-latest == 'true' && steps.apt-version.outputs.max-major) || steps.apt-version.outputs.min-major }}"
        minor="${{ (inputs.check-latest == 'true' && steps.apt-version.outputs.max-minor) || steps.apt-version.outputs.min-minor }}"
        
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        IFS=" " read -r -a packages_array <<< "$packages"
        IFS=" " read -r -a versions_array <<< "$versions"
        
        # Find the index of the package matching version
        index=-1
        for ((i=0; i<${#versions_array[@]}; i++))
        do
          if [[ "${versions_array[i]}" == "$match" ]]
          then
            index=$i
            break
          fi
        done
        ${{ (inputs.trace-commands == 'true' && 'echo index="$index"') || '' }}
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        # Find the package corresponding to the matching version
        if [[ $index != -1 && $index -lt ${#packages_array[@]} ]]
        then
          package="${packages_array[$index]}"
        
          # Determine if apt-get should be called with `sudo`, which is often not the case with containers
          if which sudo >/dev/null 2>&1; then
            if [ $? -eq 0 ]
            then
              sudo_prefix="sudo "
            else
              sudo_prefix=""
            fi
          else
            sudo_prefix=""
          fi
          $sudo_prefix apt-get install -y "$package"
        
          # find the executable: apt-get should install it as gcc-$major
          if command -v "g++-$major.$minor" &> /dev/null; then
            cxx="$(which "g++-$major.$minor")"
            cc="$(which "gcc-$major.$minor")"
          elif command -v "g++-$major" &> /dev/null; then
            cxx="$(which "g++-$major")"
            cc="$(which "gcc-$major")"
          elif command -v "g++" &> /dev/null; then
            cxx="$(which "g++")"
            cc="$(which "gcc")"
          fi
          echo -E "cxx=$cxx" >> $GITHUB_OUTPUT
          echo -E "cc=$cc" >> $GITHUB_OUTPUT
          gcc_bin_path="$(dirname $cxx)"
          echo -E "bin=$gcc_bin_path" >> $GITHUB_OUTPUT
          gcc_dest="$(dirname $gcc_bin_path)"
          echo -E "gcc_dest=$gcc_dest" >> $GITHUB_OUTPUT
          echo "version=$match" >> $GITHUB_OUTPUT
        fi

    - name: Find a GCC release version that satisfies the requirements
      uses: alandefreitas/cpp-actions/semver-utils@v1.1.0
      if: ${{ steps.setup-system-gcc.outputs.cxx == '' && steps.setup-path-gcc.outputs.cxx == '' && steps.setup-apt-gcc.outputs.cxx == '' }}
      id: download-version
      with:
        version: ${{ steps.release-versions.outputs.all-versions }}
        satisfies: ${{ steps.strip-version.outputs.version || steps.release-versions.outputs.latest }}
        lenient: false

    - name: Setup GCC
      if: ${{ steps.setup-system-gcc.outputs.cxx == '' && steps.setup-path-gcc.outputs.cxx == '' && steps.setup-apt-gcc.outputs.cxx == '' }}
      shell: bash
      id: setup-gcc
      run: |
        # Setup compatible GCC version from our binaries
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        # Stripped version
        all_versions="${{ steps.release-versions.outputs.all-versions }}"
        
        # The version we want to download
        release="${{ (steps.download-version.outputs.satisfied == 'false' && steps.release-versions.outputs.latest) || (inputs.check-latest == 'true' && steps.download-version.outputs.max-release) || steps.download-version.outputs.min-release }}"
        major="${{ (steps.download-version.outputs.satisfied == 'false' && steps.release-versions.outputs.latest) || (inputs.check-latest == 'true' && steps.download-version.outputs.max-major) || steps.download-version.outputs.min-major }}"
        minor="${{ (steps.download-version.outputs.satisfied == 'false' && steps.release-versions.outputs.latest) || (inputs.check-latest == 'true' && steps.download-version.outputs.max-minor) || steps.download-version.outputs.min-minor }}"
        patch="${{ (steps.download-version.outputs.satisfied == 'false' && steps.release-versions.outputs.latest) || (inputs.check-latest == 'true' && steps.download-version.outputs.max-patch) || steps.download-version.outputs.min-patch }}"
        
        # These are the valid GCC versions we consider downloading
        version_candidates="$release"
        semver_regex='([0-9]+)\.([0-9]+)\.([0-9]+)'
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        # Include patched versions if main version is unavailable
        for version in ${all_versions// / }
        do
            [[ $version =~ $semver_regex ]]
            other_major="${BASH_REMATCH[1]}"
            other_minor="${BASH_REMATCH[2]}"
            other_patch="${BASH_REMATCH[3]}"
            if [[ $major -eq $other_major ]] && [[ $minor -eq $other_minor ]] && [[ $patch -ne $other_patch ]]; then
                version_candidates+=" $version"
            fi
        done
        # Include other minor versions if patched version is unavailable
        for version in ${all_versions// / }
        do
            [[ $version =~ $semver_regex ]]
            other_major="${BASH_REMATCH[1]}"
            other_minor="${BASH_REMATCH[2]}"
            other_patch="${BASH_REMATCH[3]}"
            if [[ $major -eq $other_major ]] && [[ $minor -ne $other_minor ]]; then
                version_candidates+=" $version"
            fi
        done
        ${{ (inputs.trace-commands == 'true' && 'echo version_candidates="$version_candidates"') || '' }}
        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        
        # Find ubuntu version
        set +e
        if [ "$ubuntu_version" == "" ]; then
            # Extract Ubuntu version from lsb_release -rs
            ubuntu_version=$(lsb_release -rs)
        fi
        
        if [ "$ubuntu_version" == "" ]; then
            # Extract Ubuntu version from /etc/os-release
            os_release=$(cat /etc/os-release)
            version_regex='VERSION_ID="([^"]+)"'
            if [[ $os_release =~ $version_regex ]]; then
                ubuntu_version=${BASH_REMATCH[1]}
            else
                ubuntu_version="Unknown"
            fi
        fi
        
        if [ "$ubuntu_version" == "" ]; then
            # Extract Ubuntu version from /etc/lsb-release
            lsb_release=$(cat /etc/lsb-release)
            version_regex='DISTRIB_RELEASE=([^ ]+)$'
            if [[ $lsb_release =~ $version_regex ]]; then
                ubuntu_version=${BASH_REMATCH[1]}
            fi
        fi
        
        if [ "$ubuntu_version" == "" ]; then
            # Extract Ubuntu version from uname -a
            uname_output=$(uname -a)
            version_regex='~([0-9]+\.[0-9]+)'
            if [[ $uname_output =~ $version_regex ]]; then
                ubuntu_version=${BASH_REMATCH[1]}
            fi
        fi
        set -e
        echo "ubuntu_version=$ubuntu_version" >> $GITHUB_OUTPUT
        
        if [ "$ubuntu_version" == "" ]; then
            false
        fi
        
        # Sort ubuntu version binaries according to current ubuntu version
        if [ "$ubuntu_version" == "20.04" ]; then 
          ubuntu_versions=("20.04" "22.04" "18.04" "16.04" "14.04" "12.04" "10.04")
        elif [ "$ubuntu_version" == "18.04" ]; then 
          ubuntu_versions=("18.04" "20.04" "16.04" "22.04" "14.04" "12.04" "10.04")
        elif [ "$ubuntu_version" == "16.04" ]; then 
          ubuntu_versions=("16.04" "18.04" "14.04" "20.04" "12.04" "22.04" "10.04")
        elif [ "$ubuntu_version" == "12.04" ]; then 
          ubuntu_versions=("12.04" "14.04" "10.04" "16.04" "18.04" "20.04" "22.04")
        elif [ "$ubuntu_version" == "10.04" ]; then 
          ubuntu_versions=("10.04" "12.04" "14.04" "16.04" "18.04" "20.04" "22.04")
        else
          ubuntu_versions=("22.04" "20.04" "18.04" "16.04" "14.04" "12.04" "10.04")
        fi
        
        # Find a URL for the binaries (considering ubuntu version)
        gcc_url_OK=""
        for ubuntu_version in "${ubuntu_versions[@]}"; do
          for version_candidate in ${version_candidates// / }; do
            ubuntu_image="ubuntu-$ubuntu_version"
            gcc_basename="gcc-$version_candidate-x86_64-linux-gnu-$ubuntu_image"
            gcc_filename="$gcc_basename.tar.gz"
            gcc_url="https://github.com/alandefreitas/cpp-actions/releases/download/gcc-binaries/$gcc_filename"
            gcc_url_exists=$(curl --silent --fail --head "$gcc_url" >/dev/null && echo "true" || echo "false")
            if [ "$gcc_url_exists" == "true" ]; then
              gcc_url_OK="$gcc_url"
              break
            fi
          done
          if [ "$gcc_url_OK" != "" ]; then
            break
          fi
        done
        
        # Find a URL for binaries (no ubuntu version)
        if [ "$gcc_url_OK" == "" ]; then
          for version_candidate in ${version_candidates// / }; do
            gcc_basename="gcc-$version_candidate-Linux-x86_64"
            gcc_filename="$gcc_basename.tar.gz"
            gcc_url="https://github.com/alandefreitas/cpp-actions/releases/download/gcc-binaries/$gcc_filename"
            gcc_url_exists=$(curl --silent --fail --head "$gcc_url" >/dev/null && echo "true" || echo "false")
            if [ "$gcc_url_exists" == "true" ]; then
              gcc_url_OK="$gcc_url"
              break
            fi
          done
          if [ "$gcc_url_OK" != "" ]; then
            break
          fi
        fi
        
        # The URL is always tar.gz and only x86_64 is supported.
        if [ "$gcc_url_OK" != "" ]; then
          echo "gcc_basename=$gcc_basename" >> $GITHUB_OUTPUT
          echo "gcc_filename=$gcc_filename" >> $GITHUB_OUTPUT
          echo "gcc_url=$gcc_url" >> $GITHUB_OUTPUT
          gcc_dest="${{runner.tool_cache}}/gcc/$version_candidate"
          echo -E "gcc_dest=$gcc_dest" >> $GITHUB_OUTPUT
          gcc_bin_path="$gcc_dest/bin"
          echo -E "bin=$gcc_bin_path" >> $GITHUB_OUTPUT
          echo -E "cc=$gcc_bin_path/gcc" >> $GITHUB_OUTPUT
          echo -E "cxx=$gcc_bin_path/g++" >> $GITHUB_OUTPUT
          echo "version=$version_candidate" >> $GITHUB_OUTPUT
        fi


    - name: GCC cache
      if: steps.setup-gcc.outputs.gcc_url
      id: cache-gcc
      uses: actions/cache@v3
      with:
        path: ${{ steps.setup-gcc.outputs.gcc_dest }}
        key: ${{ steps.setup-gcc.outputs.gcc_url }}

    - name: Ensure curl is available
      if: ${{ steps.cache-gcc.outputs.cache-hit != 'true' && steps.setup-gcc.outputs.gcc_url }}
      uses: alandefreitas/cpp-actions/package-install@v1.0.0
      with:
        apt-get: curl

    - name: Install GCC
      if: ${{ steps.cache-gcc.outputs.cache-hit != 'true' && steps.setup-gcc.outputs.gcc_url }}
      shell: bash
      id: install-gcc
      run: |
        # Install GCC
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        # Download ${{ steps.setup-gcc.outputs.gcc_url }}
        if command -v curl &> /dev/null; then
          curl -L -o "${{ steps.setup-gcc.outputs.gcc_filename }}" "${{ steps.setup-gcc.outputs.gcc_url }}"
        elif command -v wget &> /dev/null; then
          wget -O "${{ steps.setup-gcc.outputs.gcc_filename }}" "${{ steps.setup-gcc.outputs.gcc_url }}"
        else
          echo "This action requires either curl or wget to fetch ${{ steps.setup-gcc.outputs.gcc_filename }}"
          false
        fi
        
        # Unzip binaries
        mkdir -p "${{ steps.setup-gcc.outputs.gcc_dest }}" || true
        gcc_parent_dest="${{runner.tool_cache}}/gcc"
        ${{ (inputs.trace-commands == 'true' && format('tar -xvf "{0}" -C "$gcc_parent_dest" --transform s/{1}/{2}/', steps.setup-gcc.outputs.gcc_filename, steps.setup-gcc.outputs.gcc_basename, steps.setup-gcc.outputs.version)) || '' }} 
        ${{ (inputs.trace-commands != 'true' && format('tar -xf "{0}" -C "$gcc_parent_dest" --transform s/{1}/{2}/', steps.setup-gcc.outputs.gcc_filename, steps.setup-gcc.outputs.gcc_basename, steps.setup-gcc.outputs.version)) || '' }}
        
        # Print installed version
        "${{ steps.setup-gcc.outputs.cxx }}" --version

    - name: Set up LIBRARY_PATH
      if: ${{ steps.setup-gcc.outputs.gcc_url }}
      shell: bash
      run: |
        # Set up LIBRARY_PATH
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        # Add shared libraries to LIBRARY_PATH
        gcc_dest="${{ steps.setup-gcc.outputs.gcc_dest }}"
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        ${{ (inputs.trace-commands == 'true' && 'echo -E "LIBRARY_PATH=\"$LIBRARY_PATH\""') || '' }}
        while IFS= read -r -d '' dir; do
          if [[ -d "$dir" ]]; then
            for file in "$dir"/*.so.[0-9]*; do
              if [[ -f "$file" ]]; then
                if [[ ! "$LIBRARY_PATH" =~ (^|:)"$dir"$ ]]; then
                  if [[ -n "$LIBRARY_PATH" ]]; then
                     LIBRARY_PATH="$LIBRARY_PATH:$dir"
                  else
                     LIBRARY_PATH="$dir"
                  fi
                fi
                break
              fi
            done
          fi
        done < <(find "$gcc_dest" -type d -print0)
        ${{ (inputs.trace-commands == 'true' && 'echo -E "LIBRARY_PATH=\"$LIBRARY_PATH\""') || '' }}
        
        IFS=':' read -ra paths <<< "$LIBRARY_PATH"
        for path in "${paths[@]}"; do
          if [[ ! -d "$path" ]]; then
            echo "💥 Library path does not exist: $path"
          fi
        done

        ${{ (inputs.trace-commands == 'true' && 'set -x') || '' }}
        export LIBRARY_PATH
        echo -E "LIBRARY_PATH=$LIBRARY_PATH" >> "$GITHUB_ENV"
        
    - name: Parse Final GCC Setup version
      uses: alandefreitas/cpp-actions/semver-utils@v1.1.0
      id: version
      with:
        version: ${{ steps.setup-gcc.outputs.version || steps.setup-apt-gcc.outputs.version || steps.setup-system-gcc.outputs.version || steps.setup-path-gcc.outputs.version }}
        lenient: true

    - name: Outputs
      shell: bash
      id: features
      run: |
        # Output information about the GCC we setup up
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }} 
        
        # the GCC version we found or installed
        release="${{ steps.version.outputs.release }}"
        echo "release=$release" >> $GITHUB_OUTPUT
        major="${{ steps.version.outputs.major }}"
        echo "major=$major" >> $GITHUB_OUTPUT
        minor="${{ steps.version.outputs.minor }}"
        echo "minor=$minor" >> $GITHUB_OUTPUT
        patch="${{ steps.version.outputs.patch }}"
        echo "patch=$patch" >> $GITHUB_OUTPUT
        
        # g++ path
        cxx_path="${{ steps.setup-gcc.outputs.cxx || steps.setup-apt-gcc.outputs.cxx || steps.setup-system-gcc.outputs.cxx || steps.setup-path-gcc.outputs.cxx }}"
        echo -E "cxx=$cxx_path" >> $GITHUB_OUTPUT
        
        cc_path="${{ steps.setup-gcc.outputs.cc || steps.setup-apt-gcc.outputs.cc || steps.setup-system-gcc.outputs.cc || steps.setup-path-gcc.outputs.cc }}"
        echo -E "cc=$cc_path" >> $GITHUB_OUTPUT
        
        # bin path
        bindir=$(dirname "$cxx_path")
        echo -E "bindir=$bindir" >> $GITHUB_OUTPUT
        
        # install path
        dir=$(dirname "$bindir")
        echo -E "dir=$dir" >> $GITHUB_OUTPUT
        
        if [[ "${{ inputs.update-environment }}" != "false" ]]; then
          PATH="$bindir:$PATH"
          export PATH
          echo -E "$bindir" >> $GITHUB_PATH
        fi
        
        ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        
        source="Unknown"
        if [ "$cxx_path" == "${{ steps.setup-gcc.outputs.cxx }}" ]; then
            source="Action-Provided Binaries"
        elif [ "$cxx_path" == "${{ steps.setup-apt-gcc.outputs.cxx }}" ]; then
            source="APT"
        elif [ "$cxx_path" == "${{ steps.setup-system-gcc.outputs.cxx }}" ]; then
            source="System Packages"
        elif [ "$cxx_path" == "${{ steps.setup-path-gcc.outputs.cxx }}" ]; then
            source="Default Path"
        fi
        
        echo "===================================== "
        echo "GCC Setup from $source"
        echo "===================================== "
        echo "Paths:"
        echo "- cxx_path:    $cxx_path"
        echo "- cc_path:     $cc_path"
        echo "- install dir: $dir"
        echo "- bin dir:     $bindir"
        echo "Version:"
        echo "- release:     $release"
        echo "- major:       $major"
        echo "- minor:       $minor"
        echo "- patch:       $patch"
        echo "===================================== "


