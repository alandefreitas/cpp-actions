#
# Copyright (c) 2023 Alan de Freitas (alandefreitas@gmail.com)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Official repository: https://github.com/alandefreitas/cpp-actions
#

name: "Create Changelog"
description: |
  This action creates an initial Changelog from the commit history.
  
  This is usually the included in your workflow after building and testing your library with 
  xref:actions/cmake-workflow.adoc[] in another job with the complete matrix.
  
  The commits considered go from the latest commit up to a commit containing a version
  commit pattern specified by version-pattern.
  
  The result can be used as the initial body for an automated release, a CHANGELOG.md file, or a job summary.
  
  Each commit is parsed as a loose variant of a https://www.conventionalcommits.org/en/v1.0.0/[conventional commit]
  in the following format:
  
  [source,none]
  ----
  <type>[optional scope]: <description>
  
  [optional body]
  
  [optional footer(s)]
  ----
  
  * The body and footer are always ignored.
  * If no type is indicated, the description goes to an initial "other" category in the message.
  * If no scope is indicated, the description goes to an initial "general" scope in the type messages.
  * Breaking changes are indicated.
  
  This action uses the local commit history to generate the notes. Ensure the `fetch-depth` option
  is set when cloning your repository in CI. If this option is unset, the checkout action will
  perform a shallow clone and the Changelog will only include the latest commit.
  
  [source,yml]
  ----
  - uses: actions/checkout@v3
    with:
      fetch-depth: 100
  ----
  
  This parameter can also be used as a limit on the number of commits the action should consider.

inputs:
  source-dir:
    description: |
      The source directory from whose commits will be analyzed
    required: false
    default: '.'
  version-pattern:
    description: |
      A regex pattern used to identify if a commit is a version delimiter.
      
      When a commit has a message that matches this pattern, the list of
      commits considered in the notes is complete.
      
      For instance, assuming the pattern '(Bump|Set)\s+version', when
      we find a commit subject such as 'Bump version to 1.0.0', the list
      of commits considered in the notes is complete.
      
      This constraint does not apply to the current and latest commit.

    required: false
    default: '(Bump|Set)\s+version'
  tag-pattern:
    description: |
      A regex pattern used to identify if a commit is a tagged delimiter.
      
      When a commit has the same hash has the commit associated with a
      tag whose name matches this pattern, the list of commits considered
      in the notes is complete.
      
      For instance, assuming the pattern 'v.*\..*\..*', when we find 
      a commit with the same hash as the commit associated with the tag
      'v1.0.0', the list of commits considered in the notes is complete.
      
      This tag is then associated as the parent version of the 
      current release, and this information is included at the
      end of the changelog.
      
      This constraint does not apply to the current and latest commit.

    required: false
    default: 'v.*\..*\..*'
  output-path:
    description: |
      The path where the changelog will be stored.
      
      Relative paths are resolved from the source directory.

    required: false
    default: 'CHANGELOG.md'
  limit:
    description: |
      The limit on the number of commits considered in the Changelog.
      
      If the limit is set to 0 or undefined, all commits are considered.

    required: false
    default: '0'
  thank-non-regular:
    description: |
      Thank non-regular contributors.
      
      The action will attempt to identify non-regular contributors by
      analyzing the commit history and the GitHub token provided.
      
      Non-regular contributors are contributors that do not have a
      are not part of the repository's collaborators and have 
      a small number of commits.
      
      The changelog will include a thank you message to these
      contributors, including a tag to their GitHub profile.
      
      When the Changelog is used in a release, this tag
      will usually be used by GitHub to notify these contributors
      of the new release with their contribution and the 
      thank you message.

    required: false
    default: 'true'
  check-unconventional:
    description: |
      Check for commits that do not follow the conventional commit format.
      
      If one of the new commits in a PR does not follow the conventional commit format,
      the action will create a warning so that the user can fix the commit message.
      
      This helps ensure all commit messages can be used in the changelog so
      that it's consistent and that the release notes are clear and concise.

    required: false
    default: 'true'
  link-commits:
    description: |
      Link commit ids in the changelog to the repository commit.
      
      For instance, if the changelog includes a commit id such as '471aec5',
      instead of including "#471aec5" next to the commit message, it will
      include the full version with the link:
      
      https://github.com/boostorg/url/commit/471aec59401fb973e325cd50e7d61f613357e4ad[#471aec5]
      
      This is usually unnecessary because GitHub flavored markdown automatically links commits id in
      text to the commits in the same repository. Thus, including explicit links would often make the
      output more verbose and remove any extra GitHub functionality, such as pop ups associated with
      these ids.
      
      However, when the outputs is only going to be used as an action summary or in any other context
      outside GitHub, these automatic links do not exist and it's often a good idea to explicitly 
      include them to allow the reader to navigate to these repository commits.

    required: false
    default: 'false'
  github-token:
    description: |
      Github token to identify information about the project.
      
      This is currently used to:
      
      - Fetch the commit history to compare with the proposed changes
        and create a full changelog including the changes proposed in a 
        PR and the changes that are already in the main branch.
      - Fetch the list of collaborators to identify non-regular contributors.
      
      The reason we need to fetch the commit history is because the 
      checkout action only fetches the latest commit so the information
      about existing commits is not readily available to the workflow.
      
      The value for this token is usually set as the value of 
      `secrets.GITHUB_TOKEN`.
      
      Although the action does not require this token to work, it will
      be limited in the number of requests it can make to the GitHub API
      and might be forced to work with limited information.

    required: false
    default: ''
  update-summary:
    description: |
      When set to `true`, this action will update the workflow summary
      with the current changelog.

    required: false
    default: 'true'
  trace-commands:
    description: 'Trace commands executed by the workflow.'
    required: false
    default: 'false'

runs:
  using: 'node20'
  main: 'dist/index.js'
  post-if: success()
branding:
  icon: 'code'
  color: 'yellow'


