#
# Copyright (c) 2023 Alan de Freitas (alandefreitas@gmail.com)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Official repository: https://github.com/alandefreitas/cpp-actions
#

name: "Create Flamegraph"
description: |
  This action merges time-trace files generated by Clang and generates a FlameGraph.
  
  This is usually the next step in your workflow after building and testing your library with 
  xref:actions/cmake-workflow.adoc[].
  
  To generate the files, build the project with Clang and the -ftime-trace flag.
  For every object file, there will be a corresponding json file with details about build time.
  
  Each file in the build-dir will be combined into a single output file that contains
  all traces. The combined time-trace is used to generate a report and then converted to an image with 
  https://github.com/brendangregg/FlameGraph[FlameGraph].
  
  The combined time-trace files are uploaded to artifacts. It contains the svg 
  file generated with https://github.com/brendangregg/FlameGraph[FlameGraph], which you can open directly 
  in the browser. It also contains a json file you can open with:

  - https://www.speedscope.app/ (https://github.com/jlfwong/speedscope), or
  - chrome://tracing/
  
  A simple analysis is performed while combining the trace files and a report in markdown format is
  also generated. This report is saved to 'inputs.report-path' and also included with the artifacts.

inputs:
  source-dir:
    description: |
      The source directory used to generate time-traces. Relative paths in the report will be relative to this
      directory.
    required: false
    default: '.'

  build-dir:
    description: |
      The directory with the time-traces. This should usually be your build directory.
    required: false
    default: '.'

  output-path:
    description: |
      The path where the combined traces will be stored.
      
      If this is a relative path, it will be made relative to the build-dir.

    required: false
    default: 'combined-traces.json'

  report-path:
    description: |
      The path where the report will be stored.
      
      If this is a relative path, it will be made relative to the build-dir.

    required: false
    default: 'time-trace-report.md'

  generate-svg:
    description: 'Generate SVG file with the output.'
    required: false
    default: 'true'

  generate-report:
    description: 'Generate a small report with ClangBuildAnalyzer.'
    required: false
    default: 'true'

  update-summary:
    description: 'Update action summary with the SVG file.'
    required: false
    default: 'true'

  github_token:
    description: | 
      An imgur client ID to upload the SVG flamegraph.
      
      See https://api.imgur.com/

    required: false
    default: ''

  upload-artifact:
    description: 'Upload combined traces as artifact.'
    required: false
    default: 'true'

  trace-commands:
    description: 'Trace commands executed by the workflow.'
    required: false
    default: 'false'

outputs:
  traces-path:
    description: "The absolute path to combined traces."
    value: ${{ steps.ctx.outputs.output_path }}

  svg-path:
    description: "The absolute path to svg file."
    value: ${{ steps.run-flamegraph.outputs.image_path }}


runs:
  using: "composite"
  steps:
    - name: Find python
      shell: bash
      id: find-python
      run: |
        # Find python
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        python_path="$(command -v python3 || command -v python)"
        if [ -z "$python_path" ]; then
          echo -E "python_path=" >> $GITHUB_OUTPUT
        else
          echo -E "python_path=$python_path" >> $GITHUB_OUTPUT
        fi

    - uses: actions/setup-python@v5.0.0
      if: ${{ steps.find-python.outputs.python_path == '' }}
      id: setup-python
      with:
        python-version: "3.11.7"

    - name: Set context and outputs
      shell: bash
      id: ctx
      run: |
        # Set context and outputs
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        working_dir="$(pwd)"
        source_dir="${{ inputs.source-dir }}"
        if [[ $source_dir != /* ]]; then
          source_dir="$(readlink -f "$source_dir" 2>/dev/null || realpath -e "$source_dir" 2>/dev/null || echo "$working_dir/$source_dir")"
        fi
        echo -E "source_dir=$source_dir" >> $GITHUB_OUTPUT

        build_dir="${{ inputs.build-dir }}"
        if [[ $build_dir != /* ]]; then
          build_dir="$(readlink -f "$build_dir" 2>/dev/null || realpath -e "$build_dir" 2>/dev/null || echo "$working_dir/$build_dir")"
        fi
        echo -E "build_dir=$build_dir" >> $GITHUB_OUTPUT
        
        output_path="${{ inputs.output-path }}"
        if [[ $output_path != /* ]]; then
            if [[ "${build_dir}" == */ ]]; then
                output_path="${build_dir}${output_path}"
            else
                output_path="${build_dir}/${output_path}"
            fi
            output_path="$(readlink -f "$output_path" 2>/dev/null || realpath -e "$output_path" 2>/dev/null || echo "$working_dir/$output_path")"
        fi
        echo -E "output_path=$output_path" >> $GITHUB_OUTPUT
        
        report_path="${{ inputs.report-path }}"
        if [[ $report_path != /* ]]; then
            if [[ "${build_dir}" == */ ]]; then
                report_path="${build_dir}${report_path}"
            else
                report_path="${build_dir}/${report_path}"
            fi
            report_path="$(readlink -f "$report_path" 2>/dev/null || realpath -e "$report_path" 2>/dev/null || echo "$working_dir/$report_path")"
        fi
        echo -E "report_path=$report_path" >> $GITHUB_OUTPUT

        readme_path="$(dirname "$report_path")/time-trace-readme.md"
        if [ "${{ inputs.upload-artifact }}" == "true" ]; then
            echo "# Time-Trace reports" >> "$readme_path"
            echo "" >> "$readme_path"
        
            echo "## time-trace-report.md" >> "$readme_path"
            echo "" >> "$readme_path"
            echo "This file includes the report that is also included in your action summary." >> "$readme_path"
            echo "" >> "$readme_path"

            echo "## combined-traces.json.svg" >> "$readme_path"
            echo "" >> "$readme_path"
            echo "This is an interactive graphical representation of the time-traces generated with [FlameGraph](https://github.com/brendangregg/FlameGraph)." >> "$readme_path"
            echo "You can open this file directly in the browser to navigate the results." >> "$readme_path"
            echo "" >> "$readme_path"
        
            echo "## combined-traces.json" >> "$readme_path"
            echo "" >> "$readme_path"
            echo "This file includes the combined time-trace files in a single file you can open with https://www.speedscope.app/ or chrome://tracing/." >> "$readme_path"
            echo "" >> "$readme_path"
        fi
        echo -E "readme_path=$readme_path" >> $GITHUB_OUTPUT

    - name: Merge time-trace files
      shell: bash
      run: |
        # Merge time-traces and generate report
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        python_path="${{ steps.find-python.outputs.python_path || steps.setup-python.outputs.python-path || 'python' }}"
        verbose_arg="${{ (inputs.trace-commands && '--verbose') || '' }}"
        $python_path "$GITHUB_ACTION_PATH/combine-traces.py" --source-dir "${{ inputs.source-dir }}" --build-dir "${{ inputs.build-dir }}" --output "${{ inputs.output-path }}" --report-output "${{ inputs.report-path }}" $verbose_arg
        
        if [ "${{ inputs.update-summary }}" == "true" ]; then 
            cat "${{ steps.ctx.outputs.report_path }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ inputs.upload-artifact }}" == "true" ]; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "[For more information and graphics, see the time-trace artifacts](#artifacts)" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
            fi
        fi

    - name: Generate SVG time trace
      shell: bash
      id: run-flamegraph
      if: ${{ inputs.generate-svg == 'true' }}
      working-directory: ${{ steps.ctx.outputs.build-dir }}
      run: |
        # Generate SVG file
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        if [ -x /usr/bin/perl ]; then
          if command -v curl &> /dev/null; then
            curl -L -O https://github.com/brendangregg/FlameGraph/archive/d9fcc272b6a08c3e3e5b7919040f0ab5f8952d65.zip
          elif command -v wget &> /dev/null; then
            wget https://github.com/brendangregg/FlameGraph/archive/d9fcc272b6a08c3e3e5b7919040f0ab5f8952d65.zip
          else
            echo "::error title:Flamegraph::Flamegraph: neither curl nor wget are available"
            false
          fi
          unzip d9fcc272b6a08c3e3e5b7919040f0ab5f8952d65.zip
          mv FlameGraph-d9fcc272b6a08c3e3e5b7919040f0ab5f8952d65 FlameGraph
          python_path="${{ steps.find-python.outputs.python_path || steps.setup-python.outputs.python-path || 'python' }}"
          output_path="${{ steps.ctx.outputs.output_path }}"
          $python_path ./FlameGraph/stackcollapse-chrome-tracing.py "$output_path" > "$output_path.folded"
          ./FlameGraph/flamegraph.pl "$output_path.folded" > "$output_path.svg"
          echo -E "image_path=$output_path.svg" >> $GITHUB_OUTPUT
        else
          echo "::error title:FlameGraph::FlameGraph: /usr/bin/perl does not exist or is not executable"
          false
        fi

    - uses: actions/upload-artifact@v4.3.3
      if: ${{ inputs.upload-artifact == 'true' }}
      with:
        name: time-traces
        path: |
          ${{ steps.ctx.outputs.output_path }}
          ${{ steps.ctx.outputs.report_path }}
          ${{ steps.ctx.outputs.readme_path }}
          ${{ steps.run-flamegraph.outputs.image_path }}
