#
# Copyright (c) 2023 Alan de Freitas (alandefreitas@gmail.com)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Official repository: https://github.com/alandefreitas/cpp-actions
#

name: 'Boost Clone'
description: |
  This action clones the Boost source directory, attempting to get it from the cache first. Only the specified
  modules are cloned and cached.
  
  This is usually the next step in your workflow after setting up a C++ compiler with 
  xref:actions/setup-cpp.adoc[] or installing other dependencies with xref:actions/package-install.adoc[]. 
  
  Cloning boost is useful when one wants the always use the latest version of boost in a library or is writing
  a boost proposal. For other use cases, individual boost modules can be fetched with vcpkg in 
  xref:actions/package-install.adoc[] or directly included in a package manager manifest.
  
  Besides the explicitly specified list of modules, the action can also scan directories for boost dependencies
  to implicitly determine what modules should be cloned. 
  
  The union of the implicitly and explicitly specified modules is cloned. Caching is based only on these dependencies.
  
  For a project with about 5 boost dependencies, caching saves about 4 minutes in the workflow. When there's no
  cache, the scanning scripting saves us about 3 minutes.
  
  == Next steps
  
  After cloning boost modules for your C++ project, the next step in your workflow should usually be
  xref:actions/cmake-workflow.adoc[]. If you are developing a Boost library, it is also usual for the next
  step to be the xref:actions/b2-workflow.adoc[].

inputs:
  boost-dir:
    description: |
      The directory where Boost should be cloned. 
      
      If no value is provided (default), the action will clone boost in a temporary 
      directory.

    required: false
    default: ''
  branch:
    description: |
      Branch of the super-project.
      
      Boost projects should usually set this to `develop` or `master` according
      to the project branch they are working on.

    required: false
    default: 'master'
  patches:
    description: |
      A list of patches to apply to the boost super-project.
      
      A patch is a module intended as a Boost library that is not yet part of the super-project.
      
      Each path will be cloned in the `libs` directory of the super-project. 

    required: true
    default: ''

  modules:
    description: |
      The boost submodules we need to clone.
      
      This field is optional. If not set, the action will scan the modules found in `scan-modules-dir`.

    required: false
    default: ''

  scan-modules-dir:
    description: |
      An independent directory we should scan for boost dependencies to clone.
      This option also accepts a multi-line string with multiple directories.
      
      This is usually a directory in the current project that requires boost libraries.
      The Boost modules required in files from this directory will be added to the `modules` list.
      
      Only the subdirectories of this directory specified by `modules-scan-paths` will be scanned.

    required: false
    default: '.'

  modules-scan-paths:
    description: |
      Additional module subdirectory to scan.
      
      For instance, by setting it to `test` the action will scan the `test` directory for boost dependencies.
      
      By default, the action scans the ['include', 'src', 'source', 'test', 'tests', 'example', 'examples'] directories.

    required: false
    default: ''

  modules-exclude-paths:
    description: |
      Module subdirectory to exclude from scanning.
      
      Directories that match any of the values in this list will be ignored.
      
      By default, the action excludes the ['test', 'tests'] directories.

    required: false
    default: 'test tests'

  scan-modules-ignore:
    description: |
      List of modules that should be ignored in scan-modules.
      
      This if often useful to exclude the current project's libraries from the scan.

    required: false
    default: ''
  cache:
    description: |
      Cache the boost source directory for future builds.
      The cache key will include the boost hash, the modules hash and the patch hashes.
      
      When using the cache, the action will not rescan dependencies. This means that if a transitive
      dependency is updated and `optimistic-caching` is being used, the cache will not be invalidated. 
      The previous version of the transitive dependency will be used until the cache expires.
      
    required: false
    default: 'true'

  optimistic-caching:
    description: |
      If this option is `true`, the action will reuse the cache whenever direct dependencies haven't changed.
      
      For instance, if your library depends on Boost.Url and Boost.Url depends on Boost.Optional, then
      the cache will be reused for as long as Boost.Url hasn't changed, even if Boost.Optional has
      changed. If you know about a change in a transitive dependency that affects your library, the
      current cache should be invalidated for the changes to take effect.
      
      In the `develop` branch, this makes the cache much more useful, as the super-project hash changes
      many times a day and the cache would be invalidated every time that happens. The downside is that
      if a transitive dependency is updated, the cache will not be invalidated until the current cache expires.
      However, this option assumes changes in transitive dependencies should not usually affect the library.
      
      If this option is set to `false`, the cache will be invalidated whenever the hash of the Boost super-project
      repository changes, which implies it's also updated whenever a transitive dependency is updated. Note that
      in this pessimistic case, the cache will be invalidated even if the change in the super-project is unrelated
      to the library, even when considering transitive dependencies. This makes the pessimistic option more
      pessimistic than it should be.
      
      The reason we have to use the main super-project hash in the cache key is that calculating a new
      hash only for transitive dependencies would require us to clone these transitive dependencies, which
      makes the cache useless.
      
      The default value is `false`, because we prioritize correctness over performance. However,
      most users should consider the possibility of setting this option to `true`, considering their requirements.

    required: false
    default: 'false'

  trace-commands:
    description: 'Trace commands executed by the workflow.'
    required: false
    default: 'false'
outputs:
  boost-dir:
    description: "The absolute path to the boost source files."

runs:
  using: 'node20'
  main: 'dist/index.js'
  post-if: success()
branding:
  icon: 'code'
  color: 'yellow'


