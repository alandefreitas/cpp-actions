#
# Copyright (c) 2023 Alan de Freitas (alandefreitas@gmail.com)
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Official repository: https://github.com/alandefreitas/cpp-actions
#

name: 'Boost Clone'
description: |
  This action clones the Boost source directory, attempting to get it from the cache first. Only the specified
  modules are cloned and cached.
  
  Cloning boost is useful when one wants the always use the latest version of boost in a library or is writing
  a boost proposal. For other use cases, individual boost modules can be fetched with vcpkg in 
  xref:actions/package-install.adoc[] or directly included in a package manager manifest.
  
  Besides the explicitly specified list of modules, the action can also scan directories for boost dependencies
  to implicitly determine what modules should be cloned. 
  
  The union of the implicitly and explicitly specified modules is cloned. Caching is based only on these dependencies.
  
  For a project with about 5 boost dependencies, caching saves about 4 minutes in the workflow. When there's no
  cache, the scanning scripting saves us about 3 minutes.

inputs:
  boost-dir:
    description: 'The boost directory. The default value assumes boost is in-source.'
    required: false
    default: 'boost'
  branch:
    description: 'Branch of the super-project'
    required: false
    default: 'master'
  patches:
    description: 'Libraries used to patch the boost installation'
    required: true
    default: ''
  modules:
    description: 'The boost submodules we need to clone'
    required: false
    default: ''
  scan-modules-dir:
    description: 'An independent directory we should scan for boost dependencies to clone'
    required: false
    default: ''
  scan-modules-ignore:
    description: 'List of modules that should be ignored in scan-modules'
    required: false
    default: ''
  trace-commands:
    description: 'Trace commands executed by the workflow.'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4
      if: (inputs.modules != '' || inputs.scan-modules-dir != '') && !steps.find-python.outputs.python_path
      id: setup-python
      with:
        python-version: '>= 3.5'

    - name: Scan Required Boost Modules
      if: inputs.scan-modules-dir != ''
      id: scan-modules
      shell: bash
      run: |
        # Scan ${{ inputs.scan-modules-dir }}
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        source_dir="${{ inputs.scan-modules-dir }}"
        if [[ $source_dir != /* ]]; then
          source_dir="$(readlink -f "$source_dir" 2>/dev/null || realpath -e "$source_dir" 2>/dev/null || echo "$(pwd)/$source_dir")"
        fi
        
        python_path="${{ steps.setup-python.outputs.python-path }}"
        
        # Go to action path to find the script and aux files
        # https://github.com/actions/runner/issues/716
        cd "$GITHUB_ACTION_PATH"
        
        # Pre-cache the files scan_deps needs for scanning
        if command -v curl &> /dev/null; then
          curl -o "${{ inputs.branch }}.gitmodules" "https://raw.githubusercontent.com/boostorg/boost/${{ inputs.branch }}/.gitmodules"
          curl -o "${{ inputs.branch }}.exceptions.txt" "https://raw.githubusercontent.com/boostorg/boostdep/${{ inputs.branch }}/depinst/exceptions.txt"
        elif command -v wget &> /dev/null; then
          wget -O "${{ inputs.branch }}.gitmodules" "https://raw.githubusercontent.com/boostorg/boost/${{ inputs.branch }}/.gitmodules"
          wget -O "${{ inputs.branch }}.exceptions.txt" "https://raw.githubusercontent.com/boostorg/boostdep/${{ inputs.branch }}/depinst/exceptions.txt"
        else
          # Let scan_deps download the files
          $python_path -m pip install requests
        fi
        ls
        
        # Run scan_deps on the reference directory
        set -e
        modules=$($python_path scan_deps.py --dir "$source_dir" --branch ${{ inputs.branch }} ${{ inputs.scan-modules-ignore && format('--ignore {0}', inputs.scan-modules-ignore) }})
        python_exit_code=$?
        set -e
        if [ $python_exit_code -ne 0 ]; then
            echo "Error: Scan deps failed with exit code $python_exit_code"
            modules=""
        fi
        echo "modules=$modules" >> $GITHUB_OUTPUT

    - name: Environment
      id: ctx
      shell: bash
      run: |
        # Determine cache key for boost
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        boost_hash=$(git ls-remote https://github.com/boostorg/boost.git ${{ inputs.branch }} | awk '{ print $1 }')
        echo "boost_hash=$boost_hash" >> $GITHUB_OUTPUT
        
        # Merge input modules and scanned modules
        all_modules=""
        input_modules="${{ inputs.modules }}"
        scanned_modules="${{ steps.scan-modules.outputs.modules }}"
        for module in ${input_modules//,/ }
        do
            module_basename=${module##*/}
            all_modules="$all_modules $module_basename"
        done
        for module in ${scanned_modules// / }
        do
            module_basename=${module##*/}
            all_modules="$all_modules $module_basename"
        done
        echo "all_modules=$all_modules" >> $GITHUB_OUTPUT
        
        # Find wget or curl
        if command -v curl &> /dev/null; then
          curl_executable="curl"
        fi
        if command -v wget &> /dev/null; then
          wget_executable="wget"
        fi
        
        # Add modules hashes to boost cache key
        cache_hash=""
        if command -v sha1sum >/dev/null 2>&1; then
          has_sha1sum=true
        else
          has_sha1sum=false
        fi
        for module in ${all_modules// / }
        do
            module_basename=${module##*/}
        
            # Ensure the module repo exists so git doesn't fail later on
            module_repo_exists=false
            if [ -n "$curl_executable" ]; then
              module_repo_exists=$(curl --silent --fail --head https://github.com/boostorg/$module_basename >/dev/null && echo "true" || echo "false")
            elif [ -n "$wget_executable" ]; then
              module_repo_exists=$(wget --quiet --spider https://github.com/boostorg/$module_basename && echo "true" || echo "false")
            fi
        
            # Get a hash for the module
            if [ "$module_repo_exists" == "true" ]; then
              module_hash=$(git ls-remote https://github.com/boostorg/$module_basename.git ${{ inputs.branch }} | awk '{ print $1 }')
            else
              module_hash=$boost_hash
            fi
        
            # Update the cache key with a hash for the module only
            # We only invalidate the cache if one of the modules has changed.
            # Changing only the boost super-project won't invalidate the cache 
            if [ "$cache_hash" == "" ]; then
              cache_hash=$module_hash
            else
              concatenated_string="${cache_hash}${module_hash}"
              if [ "$has_sha1sum" == "true" ]; then
                cache_hash=$(echo -n "${concatenated_string}" | sha1sum | awk '{print $1}')
              else
                cache_hash=$(echo -n "${concatenated_string}" | shasum -a 1 | awk '{print $1}')
              fi
            fi
        done
        
        # Add patch names and hashes to hash
        patches=${{ inputs.patches }}
        for patch in ${patches//,/ }
        do
            patch_hash=$(git ls-remote $patch ${{ inputs.branch }} | awk '{ print $1 }')
            if [ "cache_hash" == "" ]; then
              cache_hash=$patch_hash
            else
              concatenated_string="${cache_hash}${patch_hash}"
              if [ "$has_sha1sum" == "true" ]; then
                cache_hash=$(echo -n "${concatenated_string}" | sha1sum | awk '{print $1}')
              else
                cache_hash=$(echo -n "${concatenated_string}" | shasum -a 1 | awk '{print $1}')
              fi
            fi
        done
        
        # If there are no modules, then we update the cache key with the boost-hash
        # as we are about to clone all modules
        # cache_os=${{ runner.os }}
        # cache_os="$(echo "$cache_os" | tr '[:upper:]' '[:lower:]')"
        if [ "cache_hash" == "" ]; then
          # cache_hash=$cache_os-boost-all-$boost_hash
          cache_hash=boost-source-all-$boost_hash
        else
          # cache_hash=$cache_os-boost-$cache_hash
          cache_hash=boost-source-$cache_hash
        fi
        echo "cache_hash=$cache_hash" >> $GITHUB_OUTPUT
        
        # absolute cache directory
        working_dir="$(pwd)"
        boost_dir="${{ inputs.boost-dir }}"
        if [[ $boost_dir != /* ]]; then
          boost_dir="$(readlink -f "$boost_dir" 2>/dev/null || realpath -e "$boost_dir" 2>/dev/null || echo "$working_dir/$boost_dir")"
        fi
        echo "boost_dir=$boost_dir" >> $GITHUB_OUTPUT

    # Attempt to get boost with the specified modules from the cache before cloning it
    - name: boost cache
      id: cache-boost
      uses: actions/cache@v3
      with:
        path: ${{ steps.ctx.outputs.boost_dir }}
        key: ${{ steps.ctx.outputs.cache_hash }}

    # Clone boost if not found in cache
    - name: boost clone
      if: steps.cache-boost.outputs.cache-hit != 'true'
      shell: bash
      run: |
        # Clone Boost Superproject 
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        git clone https://github.com/boostorg/boost.git -b ${{ inputs.branch }} "${{ inputs.boost-dir }}"

    # Apply patches if boost not found in cache
    - name: boost patches
      if: steps.cache-boost.outputs.cache-hit != 'true' && inputs.patches != ''
      shell: bash
      working-directory: ${{ inputs.boost-dir }}/libs
      run: |
        # Apply boost patches ${{ inputs.patches }}
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        patches=${{ inputs.patches }}
        for patch in ${patches//,/ }
        do
            git clone $patch -b ${{ inputs.branch }}
        done

    - name: Get CPU cores
      uses: SimenB/github-actions-cpu-cores@v1
      id: cpu-cores

    - name: Git features
      if: (steps.cache-boost.outputs.cache-hit != 'true' && steps.ctx.outputs.all_modules == '')
      working-directory: ${{ inputs.boost-dir }}
      shell: bash
      id: features
      run: |
        # Identify git features
        
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        GIT_EXECUTABLE="git"
        if command -v "$GIT_EXECUTABLE" &> /dev/null; then
          # Get git version
          VERSION_OUTPUT=$("$GIT_EXECUTABLE" --version)
          regex='([0-9]+)\.([0-9]+)\.([0-9]+)'
          [[ $VERSION_OUTPUT =~ $regex ]]
          GIT_VERSION="${BASH_REMATCH[0]}"
          GIT_MAJOR="${BASH_REMATCH[1]}"
          GIT_MINOR="${BASH_REMATCH[2]}"
          GIT_PATCH="${BASH_REMATCH[3]}"
          if [ "$GIT_VERSION" != "" ]; then
            echo -E "executable=$(which $GIT_EXECUTABLE)"
            echo "version=$GIT_VERSION" >> $GITHUB_OUTPUT
            echo "major=$GIT_MAJOR" >> $GITHUB_OUTPUT
            echo "minor=$GIT_MINOR" >> $GITHUB_OUTPUT
            echo "patch=$GIT_PATCH" >> $GITHUB_OUTPUT
          fi
          
          # Check if git supports --jobs option # 2.27.0 is min version for --jobs
          supports_jobs="false"
          if [ "$GIT_MAJOR" -gt "2" ]; then
            supports_jobs="true"
          elif [ "$GIT_MAJOR" -eq "2" ] && [ "$GIT_MINOR" -ge "27" ]; then
            supports_jobs="true"
          fi
          echo "jobs=$supports_jobs" >> $GITHUB_OUTPUT
        else
          echo "::error title:Git not found::boost-clone: cannot find git executable"
          false
        fi

    # Initialize all submodules if boost not found in cache and no specific modules were specified
    - name: Initialize all submodules
      if: (steps.cache-boost.outputs.cache-hit != 'true' && steps.ctx.outputs.all_modules == '')
      working-directory: ${{ inputs.boost-dir }}
      shell: bash
      run: |
        # Update all boost submodules
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        GIT_ARGS=(${{ (steps.features.outputs.jobs == 'true' && format('"--jobs" "{0}"', steps.cpu-cores.outputs.count)) || '' }})
        git submodule update --depth 1 "${GIT_ARGS[@]}" --init --recursive

    # Initialize specified submodules if boost not found in cache and submodules were specified
    - name: Initialize specified submodules
      if: (steps.cache-boost.outputs.cache-hit != 'true' && steps.ctx.outputs.all_modules != '')
      working-directory: ${{ inputs.boost-dir }}
      shell: bash
      run: |
        # Scan transitive dependencies and update submodules
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        git submodule update --depth 1 -q --init tools/boostdep    
        
        # Run boostdep for required modules: ${{ steps.ctx.outputs.all_modules }}
        # Initialize each explicitly specified module 
        modules="${{ steps.ctx.outputs.all_modules }}"
        for module in ${modules// / }
        do
            echo "Initialize submodule $module"
            set -x
            git submodule update --depth 1 -q --init libs/$module || true
            ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
        done
        
        # Git arguments for other modules
        GIT_ARGS="${{ (steps.features.outputs.jobs == 'true' && format('--jobs {0} ', steps.cpu-cores.outputs.count)) || '' }}"
        GIT_ARGS+="--depth 1"
        
        # Initialize dependencies of each explicitly specified module
        python_path="${{ steps.setup-python.outputs.python-path }}"
        python_exit_code=0
        for module in ${modules// / }
        do
            echo "Run boostdep for required module $module"
            # Check if git supports --jobs option # 2.27.0 is min version for --jobs
            $python_path tools/boostdep/depinst/depinst.py --include benchmark --include example --include examples --include tools --include source --git_args "$GIT_ARGS" $module
            python_exit_code=$?
            ${{ (inputs.trace-commands == 'true' && 'set +x') || '' }}
            set -e
            if [ $python_exit_code -ne 0 ]; then
                echo "Error: Boostdep failed with exit code $python_exit_code"
                break
            fi
        done
        
        if [ $python_exit_code -ne 0 ]; then
          echo "Boostdep failed. Initializing all modules..."
          git submodule update "$GIT_ARGS" --init --recursive
        fi
