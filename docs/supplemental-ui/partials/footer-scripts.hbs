<script>window.uiRootPath = '{{{uiRootPath}}}'</script>
<script src="{{{uiRootPath}}}/js/vendor/highlight.min.js"></script>
<script async src="{{{uiRootPath}}}/js/vendor/tabs.js"></script>
<script src="{{{uiRootPath}}}/js/vendor/libs.js"></script>
<script>hljs.initHighlightingOnLoad();</script>
<script src="{{{uiRootPath}}}/js/site.js"></script>

{{!-- DocSearch only available if the search bar is displayed --}}
{{#if (isSearchBarDisplayed site page)}}
<script>
    // var ALGOLIA_INSIGHTS_SRC = "https://cdn.jsdelivr.net/npm/search-insights@1.7.1";
    //
    // !function (e, a, t, n, s, i, c) {
    //   e.AlgoliaAnalyticsObject = s, e[s] = e[s] || function () {
    //     (e[s].queue = e[s].queue || []).push(arguments)
    //   }, i = a.createElement(t), c = a.getElementsByTagName(t)[0],
    //     i.async = 1, i.src = n, c.parentNode.insertBefore(i, c)
    // }(window, document, "script", ALGOLIA_INSIGHTS_SRC, "aa");
</script>

<script type="text/javascript">
    docsearch({
        container: '#docsearch',
        appId: 'LWD25NX3CD',
        apiKey: '6408f799f329e3a010e6a5ac397210d8',
        indexName: 'bonitasoft',
        hitsPerPage: 20,
        searchParameters: {
            facetFilters: ["version:{{page.version}}", "tags:{{page.component.name}}"],
        }
    });
    /*
            docsearch({
            algoliaOptions: {
                clickAnalytics: true,
            },
            handleSelected: function (input, event, suggestion, datasetNumber, context) {
                sendClickEvent(lastQueryID, lastQueryHits, suggestion);
                input.setVal('');
                window.location.assign(suggestion.url);
            },
            queryDataCallback: function (data) {
                lastQueryID = data.results[0].queryID;
                lastQueryHits = data.results[0].hits;
            }
            });

            aa('init', {
            appId: 'BH4D9OD16A',
            apiKey: '16267f96d135c47df8454efd5b448c9a',
            });
        */
</script>
{{/if}}


<script>
    let asciinemaPlayers = document.querySelectorAll('asciinema-player');
    asciinemaPlayers.forEach(htmlPlayer => {
        let options = {fit: false};
        htmlPlayer.getAttributeNames().forEach(key => options[key] = htmlPlayer.getAttribute(key));
        AsciinemaPlayer.create(htmlPlayer.getAttribute('src'), htmlPlayer, options);
    });

</script>
<script>
    // init toggle state
    const isDarkThemeEnable = localStorage.getItem('theme') === 'dark';
    initializeThemeToggleIfAvailable('check', isDarkThemeEnable);
    initializeThemeToggleIfAvailable('check-mobile', isDarkThemeEnable);

    function initializeThemeToggleIfAvailable(elementId, checked) {
        const checkElement = document.getElementById(elementId);
        if(checkElement) {
            checkElement.checked = checked;
        }
    }
</script>
