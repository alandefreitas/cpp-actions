name: 'CMake Workflow'
description: |
  This action runs a complete CMake workflow from source files. A workflow is composed of the following steps:
  
  - Configure
  - Build
  - Test
  - Install
  
  The action also sets up the environment for the workflow: 
  
  - It validates the CMake version installed in the system, 
  - Updates CMake if the library has a different minimum version, 
  - Identifies what features the current CMake version supports, and 
  - Runs a complete cmake workflow
  
  The action will adjusts the parameters as needed according to the features that CMake version supports. 
  For instance, 
  
  - If the CMake version does not support the `-S ... -B ...` syntax, the action will create the build directory and
  run the configuration step from there.
  - If the specified or default generator is multi-config, `CMAKE_CONFIGURATION_TYPES` will be used instead of 
  `CMAKE_BUILD_TYPE`, since the later is ignored by these generators.
  - If the CMake version does not support the `cmake --install` syntax, the `cmake --build --target install`
  will be use instead.
  - If the CMake version does not support multiple targets in the `cmake --build` syntax, the action will run the build
  step once for each target.
  
  The action also creates GitHub annotations when warnings or errors are emitted at any of these steps. This includes
  annotations for CMake errors at the configure step and build errors emitted from the compiler at the build step.

inputs:
  # CMake options
  cmake-path:
    description: 'The cmake executable'
    required: false
    default: 'cmake'

  cmake-version:
    description: |
      A semver range string with the cmake versions supported by this workflow. 
      
      If the existing version in the environment does not satisfy this requirement, the action install
      the min CMake version that satisfies it.
      
      This should usually match the `cmake_minimum_required` defined in your CMakeLists.txt file.

    required: false
    default: ''

  # Configure options
  source-dir:
    description: 'Directory for the source files.'
    required: false
    default: '.'
  build-dir:
    description: 'Directory for the binaries relative to the source directory.'
    required: false
    default: 'build'
  cc:
    description: 'Path to C compiler.'
    required: false
    default: ''
  ccflags:
    description: 'Flags to be used with the C compiler.'
    required: false
    default: ''
  cxx:
    description: 'Path to C++ compiler.'
    required: false
    default: ''
  cxxstd:
    description: 'List of standards with which cmake will build and test the program.'
    required: false
    default: ''
  cxxflags:
    description: 'Flags to be used with the C++ compiler.'
    required: false
    default: ''
  shared:
    description: 'Determines if add_library should create shared libraries (`BUILD_SHARED_LIBS`).'
    required: false
    default: 'false'
  toolchain:
    description: 'Path to toolchain.'
    required: false
    default: ''
  generator:
    description: 'Generator name.'
    required: false
    default: ''
  build-type:
    description: 'Build type.'
    required: false
    default: 'Release'
  build-target:
    description: 'Targets to build instead of the default target'
    required: false
    default: ''
  install-prefix:
    description: 'Path where the library should be installed.'
    required: false
    default: '.local/usr'
  extra-args:
    description: 'Extra arguments to cmake configure command.'
    required: false
    default: ''

  # Test options
  run-tests:
    description: 'Whether we should run tests.'
    required: false
    default: 'true'

  # Install options
  install:
    description: |
      Whether we should install the library. 
      
      The library is only installed once in the `install-prefix`.
      
      The latest std version described in `cxxstd` is used for the installed version.
    required: false
    default: 'true'

  # Packaging options
  # package:
  #   description: 'Run cpack with the specified generators after the install step.'
  #   required: false
  #   default: 'false'
  # cpack-generators:
  #   description: 'Generators used by cpack.'
  #   required: false
  #   default: ''

  # Annotation options
  create-annotations:
    description: 'Create github annotations on errors.'
    required: false
    default: 'true'
  ref-source-dir:
    description: |
      A reference source directory for annotations. Any annotation filename will be relative to this directory.
      
      This is typically useful when the repository being tested is not the current directory, in which
      we need to make annotations relative to some other directory.
      
      In most cases, the default option should be enough.

    required: false
    default: '.'
  trace-commands:
    description: 'Trace commands executed by the workflow.'
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Get CPU cores
      uses: SimenB/github-actions-cpu-cores@v1
      id: cpu-cores

    - name: Setup msvc dev-cmd
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Self Context
      id: ctx
      shell: bash
      run: |
        # Identify context of cmake-workflow action
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        tag=$(basename "${{ github.action_path }}")
        repo=alandefreitas/cpp-actions
        if git ls-remote --exit-code --tags "https://github.com/$repo.git" "$tag" &> /dev/null; then
          echo "tag=$tag" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ (github.ref_name == 'master' && 'master' ) || 'develop' }}" >> $GITHUB_OUTPUT
        fi

    - name: Setup CMake
      uses: alandefreitas/cpp-actions/setup-cmake@v1.1.0
      id: setup-cmake
      with:
        version: ${{ inputs.cmake-version }}
        cmake-path: ${{ inputs.cmake-path }}

    - name: CMake Generator Features
      shell: bash
      id: generator
      working-directory: ${{ inputs.source_dir }}
      run: |
        # Generator features
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        cmake_path="${{ steps.setup-cmake.outputs.path }}"
        echo "cmake_path=$cmake_path"
        
        # Find the generator that will effectively be used by this workflow
        generator="${{ inputs.generator }}"
        if [ "$generator" == "" ]; then
          # Use the --system-information option first 
          generator=$("$cmake_path" --system-information | sed -n 's/^CMAKE_GENERATOR [[:space:]]*"\([^"]*\)".*/\1/p')
        fi
        if [ "$generator" == "" ]; then
          # Infer from the OS otherwise
          generator=${{ ((runner.os == 'macOS') && '"XCode"') || ((runner.os == 'Windows') && '"Visual Studio"') || '"Unix Makefiles"' }}
        fi
        
        # Identify if this generator is multi-config
        if [[ $generator == "Visual Studio"* ]]; then
          generator_is_multi_config=true
        elif [ "$generator" == "Xcode" ]; then
          generator_is_multi_config=true
        elif [ "$generator" == "Ninja Multi-Config" ]; then
          generator_is_multi_config=true
        else
          generator_is_multi_config=false
        fi
        
        # Report results
        ${{ (inputs.trace-commands == 'true' && 'if [ "$generator_is_multi_config" == "true" ]; then echo "Generator is multi-config"; fi') || '' }}
        
        # Export
        echo "is_multi_config=$generator_is_multi_config" >> $GITHUB_OUTPUT

    - name: Workflow parameters
      shell: bash
      id: params
      working-directory: ${{ inputs.source_dir }}
      run: |
        # Calculate common parameters for the workflow
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        # CMake path
        cmake_dir="${{ steps.setup-cmake.outputs.dir }}"
        echo -E "cmake_dir=$cmake_dir" >> $GITHUB_OUTPUT
        cmake_path="${{ steps.setup-cmake.outputs.path }}"
        echo -E "cmake_path=$cmake_path" >> $GITHUB_OUTPUT
        ctest_path="${{ steps.setup-cmake.outputs.dir }}/ctest"
        echo -E "ctest_path=$ctest_path" >> $GITHUB_OUTPUT
        cpack_path="${{ steps.setup-cmake.outputs.dir }}/cpack"
        echo -E "cpack_path=$cpack_path" >> $GITHUB_OUTPUT
        
        # C compiler path
        cc="${{ inputs.cc }}"
        if [[ "$cc" != "" ]] && [[ ! -x "$cc" ]]; then
            if command -v $cc &> /dev/null; then
              cc="$(which $cc)"
            elif command -v /usr/bin/$cc &> /dev/null; then
              cc="/usr/bin/$cc"
            fi
        fi
        echo -E "cc=$cc" >> $GITHUB_OUTPUT
        
        # C++ compiler path
        cxx="${{ inputs.cxx }}"
        if [ "$cxx" != "" ] && [[ ! -x "$cxx" ]]; then
            if command -v $cxx &> /dev/null; then
              cxx="$(which $cxx)"
            elif command -v /usr/bin/$cxx &> /dev/null; then
              cxx="/usr/bin/$cxx"
            fi
        fi
        echo -E "cxx=$cxx" >> $GITHUB_OUTPUT
        
        # std versions
        cxxstds="${{ inputs.cxxstd }}"
        cxxstds="$(echo "$cxxstds" | sed 's/,/ /g')"
        if [ "$cxxstds" == "" ]; then
            cxxstds="defaultcxx"
        fi
        echo -E "cxxstds=$cxxstds" >> $GITHUB_OUTPUT
        main_cxxstd=${cxxstds##* }
        echo -E "main_cxxstd=$main_cxxstd" >> $GITHUB_OUTPUT
        
        # absolute directories
        working_dir="$(pwd)"
        source_dir="${{ inputs.source-dir }}"
        if [[ $source_dir != /* ]]; then
          source_dir="$(readlink -f "$source_dir" 2>/dev/null || realpath -e "$source_dir" 2>/dev/null || echo "$working_dir/$source_dir")"
        fi
        echo -E "source_dir=$source_dir" >> $GITHUB_OUTPUT
        
        ref_source_dir="${{ inputs.ref-source-dir || inputs.source-dir }}"
        if [[ $ref_source_dir != /* ]]; then
          ref_source_dir="$(readlink -f "$ref_source_dir" 2>/dev/null || realpath -e "$ref_source_dir" 2>/dev/null || echo "$working_dir/$ref_source_dir")"
        fi
        echo -E "ref_source_dir=$ref_source_dir" >> $GITHUB_OUTPUT
        
        build_dir="${{ inputs.build-dir }}"
        if [[ $build_dir != /* ]]; then
          build_dir="$(readlink -f "$source_dir/$build_dir" 2>/dev/null || realpath -e "$source_dir/$build_dir" 2>/dev/null || echo "$source_dir/$build_dir")"
        fi
        echo -E "build_dir=$build_dir" >> $GITHUB_OUTPUT

    - name: Configure All
      shell: bash
      id: configure
      working-directory: ${{ inputs.source_dir }}
      run: |
        # Configure all workflows
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        cxxstds="${{ steps.params.outputs.cxxstds }}"
        for cxxstd in ${cxxstds// / }
        do
            if [ "$cxxstd" != "defaultcxx" ]; then
              echo "==================================> Configure C++$cxxstd"
            fi
            std_build_dir="${{ steps.params.outputs.build_dir }}$( [ "$cxxstd" == "${{ steps.params.outputs.main_cxxstd }}" ] && echo "" || echo "-$cxxstd" )"

            # Configure step
            CONFIGURE_ARGS=(${{ (steps.setup-cmake.outputs.supports-path-to-build == 'true' && format('"-S" "{0}" "-B" "$std_build_dir"', steps.params.outputs.source_dir)) || '' }})
            CONFIGURE_ARGS+=(${{ (inputs.generator && format('"-G" "{0}"', inputs.generator)) || '' }})
            if [[ "${{ inputs.cxxflags }}" == *"/m32"* ]] && [[ "${{ inputs.generator }}" == "Visual Studio"* ]]; then
                CONFIGURE_ARGS+=("-A" "Win32")
            fi
            CONFIGURE_ARGS+=(${{ (steps.generator.outputs.is_multi_config == 'false' && format('"-D" "CMAKE_BUILD_TYPE={0}"', inputs.build-type || 'Release')) || '' }})
            CONFIGURE_ARGS+=(${{ (steps.generator.outputs.is_multi_config == 'true' && format('"-D" "CMAKE_CONFIGURATION_TYPES={0}"', inputs.build-type || 'Release')) || '' }})
            CONFIGURE_ARGS+=(${{ (inputs.toolchain && format('"-D" "CMAKE_TOOLCHAIN_FILE={0}"', inputs.toolchain)) || '' }})
            CONFIGURE_ARGS+=(${{ (inputs.install-prefix && format('"-D" "CMAKE_INSTALL_PREFIX={0}"', inputs.install-prefix)) || '' }})
            CONFIGURE_ARGS+=(${{ (inputs.run-tests && '"-D" "BUILD_TESTING=ON"') || '' }})
            CONFIGURE_ARGS+=(${{ (inputs.shared && '"-D" "BUILD_SHARED_LIBS=ON"') || '' }})
            CONFIGURE_ARGS+=(${{ (inputs.cc && format('"-D" "CMAKE_C_COMPILER={0}"', steps.params.outputs.cc)) || '' }})
            CONFIGURE_ARGS+=(${{ (inputs.cxx && format('"-D" "CMAKE_CXX_COMPILER={0}"', steps.params.outputs.cxx)) || '' }})
            
            ccflags="${{ inputs.ccflags }}"
            ccflags=$(echo "$ccflags" | sed 's/\/m32//g')
            if [ "$ccflags" != "" ]; then
                CONFIGURE_ARGS+=("-D" "CMAKE_C_FLAGS=$ccflags")
            fi
            
            cxxflags="${{ inputs.cxxflags }}"
            cxxflags=$(echo "$cxxflags" | sed 's/\/m32//g')
            if [ "$cxxflags" != "" ]; then
                CONFIGURE_ARGS+=("-D" "CMAKE_CXX_FLAGS=$cxxflags")
            fi
            
            CONFIGURE_ARGS+=($( [ "$cxxstd" == "defaultcxx" ] && echo "" || echo "-D CMAKE_CXX_STANDARD=$cxxstd" ))
            SOURCE_DIR_ARG=${{ (steps.setup-cmake.outputs.supports-path-to-build == 'false' && format('{0}', steps.params.outputs.source_dir)) || '' }}
        
            mkdir "$std_build_dir" || true
            cd "$std_build_dir"
            set +e
            set -x
            "${{ steps.params.outputs.cmake_path }}" "${CONFIGURE_ARGS[@]}" ${{ inputs.extra-args }} $SOURCE_DIR_ARG 2>&1 | tee -a "$std_build_dir/cmake-configure-output.txt"
            exit_code=$?
            if [[ $exit_code -ne 0 ]]; then
              break
            fi
            ${{ (inputs.trace-commands != 'true' && 'set +x') || '' }}
            set -e
            cd "${{ steps.params.outputs.source_dir }}"
        done
        echo "exit_code=$exit_code" >> $GITHUB_OUTPUT
        
    - name: Configure All (Annotations)
      if: ${{ inputs.create-annotations == 'true' }}
      shell: bash
      working-directory: ${{ inputs.source_dir }}
      run: |
        # Configure all workflows (Annotations)
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        cxxstds="${{ steps.params.outputs.cxxstds }}"
        for cxxstd in ${cxxstds// / }
        do
            if [ "$cxxstd" != "defaultcxx" ]; then
              echo "==================================> C++$cxxstd Configure Annotations"
            fi
            std_build_dir="${{ steps.params.outputs.build_dir }}$( [ "$cxxstd" == "${{ steps.params.outputs.main_cxxstd }}" ] && echo "" || echo "-$cxxstd" )"
        
            # Configure step annotations
            if [[ ${{ inputs.create-annotations }}  == "true" ]]; then
              cmake_regex="^CMake (Warning|Error)( at ([^:]+):([[:digit:]]+) \\(([^:]+)\\))?:(.*)"
              message_type=""
              lines=""
              while read line; do
                  if [[ "$message_type" != "" ]]; then
                      ${{ (inputs.trace-commands == 'true' && 'echo "$line"') || '' }}
                      ${{ (inputs.trace-commands == 'true' && 'echo "$lines"') || '' }}
                      lines="$lines\n$line"
                      ${{ (inputs.trace-commands == 'true' && 'echo "$lines"') || '' }}
                      if [[ "${lines: -4}" != "\n\n" ]]; then
                        continue
                      fi
                  else
                      if [[ $line == "CMake Error"* ]]; then
                        message_type="error"
                        lines="$line"
                        continue
                      elif [[ $line == "CMake Warning"* ]]; then
                        message_type="warning"
                        lines="$line"
                        continue
                      fi
                  fi
        
                  ${{ (inputs.trace-commands == 'true' && 'echo "$lines"') || '' }}
                  if [[ $lines =~ $cmake_regex ]]; then
                    filename=${BASH_REMATCH[3]}
                    if [ "$filename" != "" ]; then
                      ${{ runner.os != 'macOS' && format('filename="$(realpath -m --relative-to="{0}" "{1}/$filename")"', steps.params.outputs.ref_source_dir, steps.params.outputs.source_dir ) }}
                    fi
                    line_number=${BASH_REMATCH[4]}
                    error_type=${BASH_REMATCH[1]}
                    error_code=${BASH_REMATCH[5]}
                    error_message=${BASH_REMATCH[6]}
                    error_message="${error_message:2}"
                    error_message=$(echo $error_message | sed 's/....$//')
                    error_message=$(echo "$error_message" | sed 's/:\\n\\n/: /g')
                    error_message=$(echo "$error_message" | sed 's/\\.\\n/. /g')
                    error_message=$(echo "$error_message" | sed 's/\\n/ /g')
                    error_message=$(echo "$error_message" | sed 's/\n/ /g')
                    if [ "$filename" == "" ]; then
                      echo "::$message_type title:CMake-$error_type::CMake: $error_message"
                    else
                      echo "::$message_type file=$filename,line=$line_number,title:CMake-$error_type::CMake: $error_message"
                    fi
                  fi
                  message_type=""
                  lines=""
              done < "$std_build_dir/cmake-configure-output.txt"
            fi
        
            if [[ "${{ steps.configure.outputs.exit_code }}" -ne 0 ]]; then
              echo "CMake configuration step failed with exit code ${{ steps.configure.outputs.exit_code }}"
              echo "::error title:CMake(Configure)::CMake: Configuration step failed with exit code ${{ steps.configure.outputs.exit_code }}"
              false
            fi        
        done
    
    - name: Build All
      shell: bash
      id: build
      working-directory: ${{ inputs.source_dir }}
      run: |
        # Build All
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        cxxstds="${{ steps.params.outputs.cxxstds }}"
        for cxxstd in ${cxxstds// / }
        do
            if [ "$cxxstd" != "defaultcxx" ]; then
              echo "==================================> Build C++$cxxstd"
            fi
            std_build_dir="${{ steps.params.outputs.build_dir }}$( [ "$cxxstd" == "${{ steps.params.outputs.main_cxxstd }}" ] && echo "" || echo "-$cxxstd" )"
        
            # Build step
            set +e
            jobs_args=${{ (steps.setup-cmake.outputs.supports-parallel-build == 'false' && '""') || format('"--parallel {0}"', steps.cpu-cores.outputs.count) }}
            if [[ "${{ steps.setup-cmake.outputs.supports-build-multiple-targets }}" == "true" || "${{ inputs.build-target }}" != *" "* ]]; then
              set -x
              "${{ steps.params.outputs.cmake_path }}" --build "$std_build_dir" --config "${{ inputs.build-type || 'Release' }}" $jobs_args ${{ (inputs.build-target != '' && format('--target {0}', inputs.build-target)) || '' }} 2>&1 | tee -a "$std_build_dir/cmake-build-output.txt"
              exit_code=$?
              if [[ $exit_code -ne 0 ]]; then
                break
              fi
              ${{ (inputs.trace-commands != 'true' && 'set +x') || '' }}
            else
              build_targets="${{ inputs.build-target }}"
              for build_target in ${build_targets// / }; do
                set -x
                "${{ steps.params.outputs.cmake_path }}" --build "$std_build_dir" --config "${{ inputs.build-type || 'Release' }}" $jobs_args --target $build_target 2>&1 | tee -a "$std_build_dir/cmake-build-output.txt"
                exit_code=$?
                if [[ $exit_code -ne 0 ]]; then
                  break
                fi
                ${{ (inputs.trace-commands != 'true' && 'set +x') || '' }}
              done
            fi
            set -e
        done
        echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

    - name: Build All (Annotations)
      if: ${{ inputs.create-annotations == 'true' }}
      shell: bash
      working-directory: ${{ inputs.source_dir }}
      run: |
        # Build All (Annotations)
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        cxxstds="${{ steps.params.outputs.cxxstds }}"
        for cxxstd in ${cxxstds// / }
        do
            if [ "$cxxstd" != "defaultcxx" ]; then
              echo "==================================> C++$cxxstd" Build Annotations
            fi
            std_build_dir="${{ steps.params.outputs.build_dir }}$( [ "$cxxstd" == "${{ steps.params.outputs.main_cxxstd }}" ] && echo "" || echo "-$cxxstd" )"
        
            # Build step annotations
            if [[ ${{ inputs.create-annotations }}  == "true" ]]; then
              msvc_regex="^([^\\(\\)]+)\\(([[:digit:]]+)\\): (warning|error) ([^:]+): (.*)$"
              gcc_clang_regex="^([^:]+):([[:digit:]]+):([[:digit:]]+)?: (warning|error):([^\\[]*)(\\[-W[A-Za-z0-9-]*\\])?$"
              while read line; do
                  ${{ (inputs.trace-commands == 'true' && 'echo "$line"') || '' }}
                  if [[ "$line" =~ $gcc_clang_regex ]]; then
                    filename=${BASH_REMATCH[1]}
                    ${{ runner.os != 'macOS' && format('filename="$(realpath -m --relative-to="{0}" "$filename")"', steps.params.outputs.ref_source_dir ) }}
                    if [[ $filename == ../* ]]; then
                      continue
                    fi
                    error_type=${BASH_REMATCH[4]}
                    line_number=${BASH_REMATCH[2]}
                    column=${BASH_REMATCH[3]}
                    title="Build Error"
                    msg=""
                    compiler="${{ inputs.cxx }}"
                    if [ "$compiler" != "" ]; then
                      compiler=$(basename $compiler)
                      title="$title - $compiler"
                      msg="$compiler"
                    fi
                    error_message=${BASH_REMATCH[5]}
                    if [ "$msg" != "" ]; then
                      msg="$msg: $error_message"
                    else
                      msg="$error_message"
                    fi
                    error_code=${BASH_REMATCH[6]}
                    if [ "$error_code" != "" ]; then
                      title="$title - $error_code"
                      msg="$msg ($error_code)"
                    fi
                    echo "::$error_type file=$filename,line=$line_number,col:$column,title:$title::$msg"
                  elif [[ "$line" =~ $msvc_regex ]]; then
                    filename=${BASH_REMATCH[1]}
                    ${{ runner.os != 'macOS' && format('filename="$(realpath -m --relative-to="{0}" "$filename")"', steps.params.outputs.ref_source_dir ) }}
                    if [[ $filename == ../* ]]; then
                      continue
                    fi
                    line_number=${BASH_REMATCH[2]}
                    error_type=${BASH_REMATCH[3]}
                    error_code=${BASH_REMATCH[4]}
                    error_message=${BASH_REMATCH[5]}
                    compiler="${{ inputs.cxx }}"
                    if [ "$compiler" != ""]; then
                      compiler=$(basename $compiler)
                    fi
                    echo "::$error_type file=$filename,line=$line_number,title:$compiler: $error_type $error_code::$compiler: $error_message ($error_type - $error_code)"
                  fi
              done < "$std_build_dir/cmake-build-output.txt"
            fi
        
            if [[ "${{ steps.build.outputs.exit_code }}" -ne 0 ]]; then
              echo "CMake build step failed with exit code ${{ steps.build.outputs.exit_code }}"
              false
            fi
        done
    
    - name: Test
      shell: bash
      id: test
      if: ${{ inputs.run-tests == 'true' }}
      working-directory: ${{ inputs.source_dir }}
      run: |
        # Test C++${{ steps.params.outputs.main_cxxstd }}
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        cxxstds="${{ steps.params.outputs.cxxstds }}"
        for cxxstd in ${cxxstds// / }
        do
            if [ "$cxxstd" != "defaultcxx" ]; then
              echo "==================================> Test C++$cxxstd"
            fi
            std_build_dir="${{ steps.params.outputs.build_dir }}$( [ "$cxxstd" == "${{ steps.params.outputs.main_cxxstd }}" ] && echo "" || echo "-$cxxstd" )"
        
            # Test step
            if [[ "${{ inputs.run-tests }}" == true && "$cxxstd" == "${{ steps.params.outputs.main_cxxstd }}" ]]; then
              set +e
              "${{ steps.params.outputs.ctest_path }}" --test-dir "$std_build_dir" $jobs_args -C "${{ inputs.build-type || 'Release' }}" --no-tests=error --progress --output-on-failure  2>&1 | tee -a "$std_build_dir/cmake-test-output.txt"
              exit_code=$?
              if [[ $exit_code -ne 0 ]]; then
                break
              fi
              set -e
            fi
        done
        echo "exit_code=$exit_code" >> $GITHUB_OUTPUT

    - name: Test (Annotations)
      if: ${{ inputs.run-tests == 'true' && inputs.create-annotations == 'true' }}
      shell: bash
      working-directory: ${{ inputs.source_dir }}
      run: |
        # Test ${{ steps.params.outputs.main_cxxstd }} (Annotations)
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        cxxstds="${{ steps.params.outputs.cxxstds }}"
        for cxxstd in ${cxxstds// / }
        do
            if [ "$cxxstd" != "defaultcxx" ]; then
              echo "==================================> C++$cxxstd" Test Annotations
            fi
            std_build_dir="${{ steps.params.outputs.build_dir }}$( [ "$cxxstd" == "${{ steps.params.outputs.main_cxxstd }}" ] && echo "" || echo "-$cxxstd" )"
        
            # Test step
            if [[ "${{ inputs.run-tests }}" == true && "$cxxstd" == "${{ steps.params.outputs.main_cxxstd }}" ]]; then
              # Test step annotations
              if [[ "${{ inputs.create-annotations }}" == true ]]; then
                boost_test_regex="^#[[:digit:]]+ ([^\\(\\)]+)\\(([[:digit:]]+)\\) failed: (.*)"
                while read line; do
                  if [[ "$line" =~ $boost_test_regex ]]; then
                    filename=${BASH_REMATCH[1]}
                    if [ -e "${{ steps.params.outputs.ref_source_dir }}/$filename" ]; then
                      ${{ runner.os != 'macOS' && format('filename="$(realpath -m --relative-to="{0}" "{1}/$filename")"', steps.params.outputs.ref_source_dir, steps.params.outputs.ref_source_dir ) }}
                    else
                      test_filename=$(find "${{ steps.params.outputs.ref_source_dir }}/test" -name "$filename" | head -n 1 | xargs)
                      if [ "$test_filename" != "" ]; then
                        ${{ runner.os != 'macOS' && format('filename="$(realpath -m --relative-to="{0}" "$test_filename")"', steps.params.outputs.ref_source_dir ) }}
                      else
                        ref_filename=$(find "${{ steps.params.outputs.ref_source_dir }}" -name "$filename" | head -n 1 | xargs)
                        if [ "$ref_filename" == "" ]; then
                          ${{ runner.os != 'macOS' && format('filename="$(realpath -m --relative-to="{0}" "$ref_filename")"', steps.params.outputs.ref_source_dir ) }}
                        fi
                      fi
                    fi
                    line_number=${BASH_REMATCH[2]}
                    error_message=${BASH_REMATCH[3]}
                    echo "::error file=$filename,line=$line_number,title:Boost.Test::Boost.Test: $error_message"
                  fi
                done < "$std_build_dir/cmake-test-output.txt"
              fi
        
              if [[ "${{ steps.test.outputs.exit_code }}" -ne 0 ]]; then
                echo "CMake test step failed with exit code ${{ steps.test.outputs.exit_code }}"
                false
              fi
            fi        
        done

    - name: Install All
      shell: bash
      if: ${{ inputs.install == 'true' }}
      working-directory: ${{ inputs.source_dir }}
      run: |
        # Install ${{ steps.params.outputs.main_cxxstd }}
        ${{ (inputs.trace-commands == 'true' && 'set -xe') || '' }}
        
        cxxstds="${{ steps.params.outputs.cxxstds }}"
        for cxxstd in ${cxxstds// / }
        do
            if [ "$cxxstd" != "defaultcxx" ]; then
              echo "==================================> Install C++$cxxstd"
            fi
            std_build_dir="${{ steps.params.outputs.build_dir }}$( [ "$cxxstd" == "${{ steps.params.outputs.main_cxxstd }}" ] && echo "" || echo "-$cxxstd" )"
        
            # Install step
            if [[ "$cxxstd" == "${{ steps.params.outputs.main_cxxstd }}" ]]; then
              mkdir "${{ inputs.install-prefix }}" || true
              INSTALL_ARGS=("$std_build_dir")
              INSTALL_ARGS+=("--config" "${{ inputs.build-type || 'Release' }}")
              if [[ "${{ steps.setup-cmake.outputs.supports-cmake-install }}"  == "true" ]]; then
                INSTALL_ARGS+=(${{ (inputs.install-prefix != '' && format('"--prefix" "{0}"', inputs.install-prefix)) || '' }})
                set -x
                "${{ steps.params.outputs.cmake_path }}" --install "${INSTALL_ARGS[@]}" 2>&1 | tee -a "$std_build_dir/cmake-install-output.txt"
                ${{ (inputs.trace-commands != 'true' && 'set +x') || '' }}
              else
                set -x
                "${{ steps.params.outputs.cmake_path }}" --build "${INSTALL_ARGS[@]}" --target install || true 2>&1 | tee -a "$std_build_dir/cmake-install-output.txt"
                ${{ (inputs.trace-commands != 'true' && 'set +x') || '' }}
              fi
            fi
        done
