name: 'CMake Workflow'
description: |
  This action runs a complete CMake workflow from source files. 
  
  This is usually the next step in your workflow after setting up a C++ compiler and fetching dependencies with 
  xref:actions/package-install.adoc[].
  
  A workflow is composed of the following steps:
  
  - Configure
  - Build
  - Test
  - Install
  
  The action also sets up the environment for the workflow: 
  
  - It validates the CMake version installed in the system, 
  - Updates CMake if the library has a different minimum version, 
  - Identifies what features the current CMake version supports, and 
  - Runs a complete cmake workflow
  
  The action will adjusts the parameters as needed according to the features that CMake version supports. 
  For instance, 
  
  - If the CMake version does not support the `-S ... -B ...` syntax, the action will create the build directory and
  run the configuration step from there.
  - If the specified or default generator is multi-config, `CMAKE_CONFIGURATION_TYPES` will be used instead of 
  `CMAKE_BUILD_TYPE`, since the later is ignored by these generators.
  - If the CMake version does not support the `cmake --install` syntax, the `cmake --build --target install`
  will be use instead.
  - If the CMake version does not support multiple targets in the `cmake --build` syntax, the action will run the build
  step once for each target.
  
  The action also creates GitHub annotations when warnings or errors are emitted at any of these steps. This includes
  annotations for CMake errors at the configure step and build errors emitted from the compiler at the build step.
  
  == Next steps
  
  After running the a complete CMake workflow for your project, the next step in your workflow should usually be
  the generation of reports, with tools such as the xref:actions/flamegraph.adoc[] (when `matrix.time-trace`) and 
  xref:actions/create-changelog.adoc[] (usually in another workflow job). You can also include customs steps to
  upload coverage reports (when `matrix.coverage`).
  
  If your project provides CMake installation and configuration scripts, it is also usual to include multiple
  CMake workflow steps as integration tests for CMake.

inputs:
  # ======================================
  # CMake options
  # ======================================
  cmake-path:
    description: 'The cmake executable'
    required: false
    default: 'cmake'

  cmake-version:
    description: |
      A semver range string with the cmake versions supported by this workflow. 
      
      If the existing version in the environment does not satisfy this requirement, the action install
      the min CMake version that satisfies it.
      
      This should usually match the `cmake_minimum_required` defined in your CMakeLists.txt file.

    required: false
    default: '*'

  # ======================================
  # Configure options
  # ======================================
  source-dir:
    description: 'Directory for the source files.'
    required: false
    default: '.'
  build-dir:
    description: 'Directory for the binaries relative to the source directory.'
    required: false
    default: 'build'
  cc:
    description: |
      Path to C compiler.
      
      If the input is not specified, the action will use the compiler defined by the environment variable `CC`.
      
      If the environment variable is not specified, the action will use the default compiler as identified by CMake.

    required: false
    default: ''
  ccflags:
    description: |
      Flags to be used with the C compiler.
      
      If the input is not specified, the action will use the flags defined by the environment variable `CFLAGS`.
      
      If the environment variable is not specified, the action will use the default flags as identified by CMake.

    required: false
    default: ''
  cxx:
    description: |
      Path to C++ compiler.
      
      If the input is not specified, the action will use the compiler defined by the environment variable `CXX`.
      
      If the environment variable is not specified, the action will use the default compiler as identified by CMake.

    required: false
    default: ''
  cxxflags:
    description:
      Flags to be used with the C++ compiler.
      
      If the input is not specified, the action will use the flags defined by the environment variable `CXXFLAGS`.
      
      If the environment variable is not specified, the action will use the default flags as identified by CMake.

    required: false
    default: ''
  cxxstd:
    description: |
      Comma-separated list of standards with which cmake will build and test the program.
      
      If the input is not specified, the action will use the standards defined by the environment variable `CXXSTD`.
      
      If the environment variable is not specified, the action will use the default standards as identified by CMake.
      
      Unlike CMake, which can only build with one standard at a time, this action will iteratively build and test
      with multiple standards. When multiple standards are used, the build directory will be suffixed with the
      standard number with the exception of the latest standard.

    required: false
    default: ''
  shared:
    description: |
      Determines if add_library should create shared libraries (`BUILD_SHARED_LIBS`).
      
      If the input is not specified, the action will use the value defined by the environment variable `BUILD_SHARED_LIBS`.
      
      If the environment variable is not specified, the action will use the default value as identified by CMake (OFF).

    required: false
    default: ''
  toolchain:
    description: |
      Path to toolchain.
      
      If the input is not specified, the action will use the toolchain defined by the environment variable `CMAKE_TOOLCHAIN_FILE`.
      
      If the environment variable is not specified, the action will use the default toolchain as identified by CMake.

    required: false
    default: ''
  generator:
    description: |
      Generator name. 
      
      If not specified, the action will use the generator defined by the environment variable `CMAKE_GENERATOR`.
      
      If the environment variable is not specified, the action will try to use the default generator for the platform.

    required: false
    default: ''
  generator-toolset:
    description: |
      Toolset specification for the generator, if supported. 
      
      If not specified, the action will use the toolset defined by the environment variable `CMAKE_GENERATOR_TOOLSET`.
      
      If the environment variable is not specified, the action will use the default toolset for the generator.

    required: false
    default: ''
  build-type:
    description: |
      Build type.
      
      If not specified, the action will use the build type defined by the environment variable `CMAKE_BUILD_TYPE`.
      
      If the environment variable is not specified, the action will use `Release` as the build type.
      
      If all values are empty, the action will try to use the default generator for the platform.
      
      If the generator is multi-config, this values will be applies to the `CMAKE_CONFIGURATION_TYPES` CMake options
      instead of `CMAKE_BUILD_TYPE`.

    required: false
    default: ''
  build-target:
    description: 'Targets to build instead of the default target'
    required: false
    default: ''
  extra-args:
    description: 'Extra arguments to cmake configure command.'
    required: false
    default: ''
  export-compile-commands:
    description: |
      Set CMAKE_EXPORT_COMPILE_COMMANDS=ON in the configure step.
      
      If the input is not specified, the action will use the value defined by the environment variable `CMAKE_EXPORT_COMPILE_COMMANDS`.
      
      If the environment variable is not specified, the action will use the default value as identified by CMake (OFF).

    required: false
    default: ''

  # ======================================
  # Configure and Install options
  # ======================================
  install-prefix:
    description: |
      Path where the library should be installed.
      
      If the input is not specified, the action will use the path defined by the environment variable `CMAKE_INSTALL_PREFIX`.
      
      If the environment variable is not specified, the action will use the default path as identified by CMake.

    required: false
    default: ''

  # ======================================
  # Build options
  # ======================================
  jobs:
    description: |
      Number of jobs to use in parallel builds.
      
      If the input is not specified, the action will use the value defined by the environment variable `CMAKE_JOBS`.
      
      If the environment variable is also not specified, the action will use the number of processors available in the 
      system.

    required: false
    default: ''

  # ======================================
  # Test options
  # ======================================
  run-tests:
    description: |
      Whether we should run tests.
      
      If the input is not specified, the action will use the value defined by the environment variable `CMAKE_RUN_TESTS`.
      
      If the environment variable is also not specified, the action will attempt to run tests but will not fail if
      there are no tests.
      
      When the value is `true` or `false`, the action will also set the `configure-tests-flag` to `ON` or `OFF`.
      When the value is undefined, the `configure-tests-flag` is ignored.

    required: false
    default: ''

  configure-tests-flag:
    description: |
      Specify the flag to be passed to cmake to enable/disable tests in the configuration step.
      
      By default this is `BUILD_TESTING`, which is an option automatically created by the CTest module.
      
      If the input contains a "=", the action will use the value as is.

    required: false
    default: 'BUILD_TESTING'

  test-all-cxxstd:
    description: |
      Whether we should run tests for all C++ standards defined by `cxxstd`.
      
      If the input is not specified, the action will only run the tests with the last value defined in `cxxstd`.
      
    required: false
    default: 'false'

  # ======================================
  # Install options
  # ======================================
  install:
    description: |
      Whether we should install the library. The library is only installed once in the `install-prefix` using
      the latest standard in `cxxstd`.
      
      If the input is not specified, the action will use the value defined by the environment variable `CMAKE_INSTALL`.
      
      If the environment variable is also not specified, the action will attempt to install the library but will not
      fail if the library cannot installed.

    required: false
    default: ''

  install-all-cxxstd:
    description: |
      Whether we should install the library for all C++ standards defined by `cxxstd`.
      
      If the input is not specified, the action will only install the library with the last value defined in `cxxstd`.

    required: false
    default: 'false'

  # ======================================
  # Packaging options
  # ======================================
  package:
    description: |
      Whether we should run cpack with the specified `package-generators` after the install step.
      
      If the input is not specified, the action will use the value defined by the environment variable `CMAKE_PACKAGE`.
      
      If the environment variable is also not specified, the action will attempt to run cpack but will not
      fail if cpack cannot be run.

    required: false
    default: 'false'

  package-all-cxxstd:
    description: |
      Whether we should run `cpack` for all C++ standards defined by `cxxstd`.
      
      If the input is not specified, the action will only run cpack with the last value defined in `cxxstd`.

    required: false
    default: 'false'

  package-name:
    description: |
      The name of the package (or application). If not specified, CMake will default to the project name.

    required: false
    default: ''

  package-dir:
    description: |
      The directory in which the packages are generated by cpack.
    
      If it is not set then this will default to the build dir determined by `CPACK_PACKAGE_DIRECTORY`,
      which may be defined in CMakeLists.txt, a CPack config file or from the cpack command 
      line option `-B`. If `package-dir` is set, it overrides the value found in the config file.

    required: false
    default: ''

  package-vendor:
    description: |
      Override or define CPACK_PACKAGE_VENDOR.

    required: false
    default: ''

  package-generators:
    description: |
      A semicolon-separated list of generator names used by cpack.
      
      If not specified, the action will use the generators defined by the environment variable `CPACK_GENERATOR`.
      
      If this variable is not set, the action will attempt to generate the package with all
      CPack generators available to CMake.

    required: false
    default: ''

  package-artifact:
    description: |
      Whether the packages generated with CPack should be stored as action artifacts.
      
      If the input is not specified, the action will use the value defined by the environment variable `CMAKE_PACKAGE_ARTIFACT`.
      
      If the environment variable is also not specified, the action will store the packages as artifacts.

    required: false
    default: ''

  package-retention-days:
    description: |
      The number of days to keep the packages generated with CPack as action artifacts.
    required: false
    default: '10'

  # ======================================
  # Annotation options
  # ======================================
  create-annotations:
    description: |
      Create github annotations for errors and warnings at all steps.
      
      If the input is not specified, the action will use the value defined by the environment variable `CMAKE_CREATE_ANNOTATIONS`.
      
      If the environment variable is also not specified, the action will create annotations.

    required: false
    default: ''

  ref-source-dir:
    description: |
      A reference base directory for annotations. 
      
      For instance, if there is an error in the `/home/user/project/src/main.cpp` file, the action will create an
      annotation referring to the repository path `src/main.cpp`. 
      
      If the reference source directory is /home/user/project/src, the action will create an annotation referring to
      `main.cpp` instead because any annotation filename will be relative to this directory.
      
      If no value is provided, the environment variable `GITHUB_WORKSPACE` will be used as the reference source
      directory. This means all annotations will be relative to the repository root if `actions/checkout` has been
      called without specifying a custom `path` option.
      
      Changing this value is typically useful when the repository being tested is not the workspace directory, in
      which we need to make annotations relative to some other directory.
      
      In most cases, the default option should be enough.

    required: false
    default: ''

  trace-commands:
    description: 'Trace commands executed by the workflow.'
    required: false
    default: 'false'

runs:
  using: 'node16'
  main: 'dist/index.js'
  post-if: success()
branding:
  icon: 'code'
  color: 'yellow'
